'use strict'; // code generated by pbf v3.2.1

var FieldType = exports.FieldType = {
    "FT_DEFAULT": {
        "value": 0,
        "options": {}
    },
    "FT_CALLBACK": {
        "value": 1,
        "options": {}
    },
    "FT_POINTER": {
        "value": 4,
        "options": {}
    },
    "FT_STATIC": {
        "value": 2,
        "options": {}
    },
    "FT_IGNORE": {
        "value": 3,
        "options": {}
    },
    "FT_INLINE": {
        "value": 5,
        "options": {}
    }
};

var IntSize = exports.IntSize = {
    "IS_DEFAULT": {
        "value": 0,
        "options": {}
    },
    "IS_8": {
        "value": 8,
        "options": {}
    },
    "IS_16": {
        "value": 16,
        "options": {}
    },
    "IS_32": {
        "value": 32,
        "options": {}
    },
    "IS_64": {
        "value": 64,
        "options": {}
    }
};

var OnOffState = exports.OnOffState = {
    "ON": {
        "value": 1,
        "options": {}
    },
    "OFF": {
        "value": 2,
        "options": {}
    }
};

var ErrorCode = exports.ErrorCode = {
    "OK": {
        "value": 0,
        "options": {}
    },
    "INTERNAL_ERROR": {
        "value": 1,
        "options": {}
    },
    "INVALID_SINK_ID": {
        "value": 2,
        "options": {}
    },
    "INVALID_ROLE": {
        "value": 3,
        "options": {}
    },
    "INVALID_NETWORK_ADDRESS": {
        "value": 4,
        "options": {}
    },
    "INVALID_NETWORK_CHANNEL": {
        "value": 5,
        "options": {}
    },
    "INVALID_CHANNEL_MAP": {
        "value": 6,
        "options": {}
    },
    "INVALID_NETWORK_KEYS": {
        "value": 7,
        "options": {}
    },
    "INVALID_AC_RANGE": {
        "value": 8,
        "options": {}
    },
    "INVALID_SINK_STATE": {
        "value": 9,
        "options": {}
    },
    "INVALID_DEST_ADDRESS": {
        "value": 10,
        "options": {}
    },
    "INVALID_DEST_ENDPOINT": {
        "value": 11,
        "options": {}
    },
    "INVALID_SRC_ENDPOINT": {
        "value": 12,
        "options": {}
    },
    "INVALID_QOS": {
        "value": 13,
        "options": {}
    },
    "INVALID_DATA_PAYLOAD": {
        "value": 14,
        "options": {}
    },
    "INVALID_SCRATCHPAD": {
        "value": 15,
        "options": {}
    },
    "INVALID_SCRATCHPAD_SIZE": {
        "value": 16,
        "options": {}
    },
    "INVLAID_SEQUENCE_NUMBER": {
        "value": 17,
        "options": {}
    },
    "INVALID_REBOOT_DELAY": {
        "value": 18,
        "options": {}
    },
    "INVALID_DIAG_INTERVAL": {
        "value": 19,
        "options": {}
    },
    "INVALID_APP_CONFIG": {
        "value": 20,
        "options": {}
    },
    "INVALID_PARAM": {
        "value": 21,
        "options": {}
    },
    "NO_SCRATCHPAD_PRESENT": {
        "value": 22,
        "options": {}
    },
    "ACCESS_DENIED": {
        "value": 23,
        "options": {}
    },
    "REQUEST_NEEDS_SINK_ID": {
        "value": 24,
        "options": {}
    },
    "INVALID_MAX_HOP_COUNT": {
        "value": 25,
        "options": {}
    }
};

var FieldType = exports.FieldType = {
    "FT_DEFAULT": {
        "value": 0,
        "options": {}
    },
    "FT_CALLBACK": {
        "value": 1,
        "options": {}
    },
    "FT_POINTER": {
        "value": 4,
        "options": {}
    },
    "FT_STATIC": {
        "value": 2,
        "options": {}
    },
    "FT_IGNORE": {
        "value": 3,
        "options": {}
    },
    "FT_INLINE": {
        "value": 5,
        "options": {}
    }
};

var IntSize = exports.IntSize = {
    "IS_DEFAULT": {
        "value": 0,
        "options": {}
    },
    "IS_8": {
        "value": 8,
        "options": {}
    },
    "IS_16": {
        "value": 16,
        "options": {}
    },
    "IS_32": {
        "value": 32,
        "options": {}
    },
    "IS_64": {
        "value": 64,
        "options": {}
    }
};

var OnOffState = exports.OnOffState = {
    "ON": {
        "value": 1,
        "options": {}
    },
    "OFF": {
        "value": 2,
        "options": {}
    }
};

var ErrorCode = exports.ErrorCode = {
    "OK": {
        "value": 0,
        "options": {}
    },
    "INTERNAL_ERROR": {
        "value": 1,
        "options": {}
    },
    "INVALID_SINK_ID": {
        "value": 2,
        "options": {}
    },
    "INVALID_ROLE": {
        "value": 3,
        "options": {}
    },
    "INVALID_NETWORK_ADDRESS": {
        "value": 4,
        "options": {}
    },
    "INVALID_NETWORK_CHANNEL": {
        "value": 5,
        "options": {}
    },
    "INVALID_CHANNEL_MAP": {
        "value": 6,
        "options": {}
    },
    "INVALID_NETWORK_KEYS": {
        "value": 7,
        "options": {}
    },
    "INVALID_AC_RANGE": {
        "value": 8,
        "options": {}
    },
    "INVALID_SINK_STATE": {
        "value": 9,
        "options": {}
    },
    "INVALID_DEST_ADDRESS": {
        "value": 10,
        "options": {}
    },
    "INVALID_DEST_ENDPOINT": {
        "value": 11,
        "options": {}
    },
    "INVALID_SRC_ENDPOINT": {
        "value": 12,
        "options": {}
    },
    "INVALID_QOS": {
        "value": 13,
        "options": {}
    },
    "INVALID_DATA_PAYLOAD": {
        "value": 14,
        "options": {}
    },
    "INVALID_SCRATCHPAD": {
        "value": 15,
        "options": {}
    },
    "INVALID_SCRATCHPAD_SIZE": {
        "value": 16,
        "options": {}
    },
    "INVLAID_SEQUENCE_NUMBER": {
        "value": 17,
        "options": {}
    },
    "INVALID_REBOOT_DELAY": {
        "value": 18,
        "options": {}
    },
    "INVALID_DIAG_INTERVAL": {
        "value": 19,
        "options": {}
    },
    "INVALID_APP_CONFIG": {
        "value": 20,
        "options": {}
    },
    "INVALID_PARAM": {
        "value": 21,
        "options": {}
    },
    "NO_SCRATCHPAD_PRESENT": {
        "value": 22,
        "options": {}
    },
    "ACCESS_DENIED": {
        "value": 23,
        "options": {}
    },
    "REQUEST_NEEDS_SINK_ID": {
        "value": 24,
        "options": {}
    },
    "INVALID_MAX_HOP_COUNT": {
        "value": 25,
        "options": {}
    }
};

var FieldType = exports.FieldType = {
    "FT_DEFAULT": {
        "value": 0,
        "options": {}
    },
    "FT_CALLBACK": {
        "value": 1,
        "options": {}
    },
    "FT_POINTER": {
        "value": 4,
        "options": {}
    },
    "FT_STATIC": {
        "value": 2,
        "options": {}
    },
    "FT_IGNORE": {
        "value": 3,
        "options": {}
    },
    "FT_INLINE": {
        "value": 5,
        "options": {}
    }
};

var IntSize = exports.IntSize = {
    "IS_DEFAULT": {
        "value": 0,
        "options": {}
    },
    "IS_8": {
        "value": 8,
        "options": {}
    },
    "IS_16": {
        "value": 16,
        "options": {}
    },
    "IS_32": {
        "value": 32,
        "options": {}
    },
    "IS_64": {
        "value": 64,
        "options": {}
    }
};

var FieldType = exports.FieldType = {
    "FT_DEFAULT": {
        "value": 0,
        "options": {}
    },
    "FT_CALLBACK": {
        "value": 1,
        "options": {}
    },
    "FT_POINTER": {
        "value": 4,
        "options": {}
    },
    "FT_STATIC": {
        "value": 2,
        "options": {}
    },
    "FT_IGNORE": {
        "value": 3,
        "options": {}
    },
    "FT_INLINE": {
        "value": 5,
        "options": {}
    }
};

var IntSize = exports.IntSize = {
    "IS_DEFAULT": {
        "value": 0,
        "options": {}
    },
    "IS_8": {
        "value": 8,
        "options": {}
    },
    "IS_16": {
        "value": 16,
        "options": {}
    },
    "IS_32": {
        "value": 32,
        "options": {}
    },
    "IS_64": {
        "value": 64,
        "options": {}
    }
};

var ScratchpadType = exports.ScratchpadType = {
    "BLANK": {
        "value": 1,
        "options": {}
    },
    "PRESENT": {
        "value": 2,
        "options": {}
    },
    "PROCESS": {
        "value": 3,
        "options": {}
    }
};

var ScratchpadStatus = exports.ScratchpadStatus = {
    "SUCCESS": {
        "value": 1,
        "options": {}
    },
    "NEW": {
        "value": 2,
        "options": {}
    },
    "ERROR": {
        "value": 3,
        "options": {}
    }
};

var OnOffState = exports.OnOffState = {
    "ON": {
        "value": 1,
        "options": {}
    },
    "OFF": {
        "value": 2,
        "options": {}
    }
};

var ErrorCode = exports.ErrorCode = {
    "OK": {
        "value": 0,
        "options": {}
    },
    "INTERNAL_ERROR": {
        "value": 1,
        "options": {}
    },
    "INVALID_SINK_ID": {
        "value": 2,
        "options": {}
    },
    "INVALID_ROLE": {
        "value": 3,
        "options": {}
    },
    "INVALID_NETWORK_ADDRESS": {
        "value": 4,
        "options": {}
    },
    "INVALID_NETWORK_CHANNEL": {
        "value": 5,
        "options": {}
    },
    "INVALID_CHANNEL_MAP": {
        "value": 6,
        "options": {}
    },
    "INVALID_NETWORK_KEYS": {
        "value": 7,
        "options": {}
    },
    "INVALID_AC_RANGE": {
        "value": 8,
        "options": {}
    },
    "INVALID_SINK_STATE": {
        "value": 9,
        "options": {}
    },
    "INVALID_DEST_ADDRESS": {
        "value": 10,
        "options": {}
    },
    "INVALID_DEST_ENDPOINT": {
        "value": 11,
        "options": {}
    },
    "INVALID_SRC_ENDPOINT": {
        "value": 12,
        "options": {}
    },
    "INVALID_QOS": {
        "value": 13,
        "options": {}
    },
    "INVALID_DATA_PAYLOAD": {
        "value": 14,
        "options": {}
    },
    "INVALID_SCRATCHPAD": {
        "value": 15,
        "options": {}
    },
    "INVALID_SCRATCHPAD_SIZE": {
        "value": 16,
        "options": {}
    },
    "INVLAID_SEQUENCE_NUMBER": {
        "value": 17,
        "options": {}
    },
    "INVALID_REBOOT_DELAY": {
        "value": 18,
        "options": {}
    },
    "INVALID_DIAG_INTERVAL": {
        "value": 19,
        "options": {}
    },
    "INVALID_APP_CONFIG": {
        "value": 20,
        "options": {}
    },
    "INVALID_PARAM": {
        "value": 21,
        "options": {}
    },
    "NO_SCRATCHPAD_PRESENT": {
        "value": 22,
        "options": {}
    },
    "ACCESS_DENIED": {
        "value": 23,
        "options": {}
    },
    "REQUEST_NEEDS_SINK_ID": {
        "value": 24,
        "options": {}
    },
    "INVALID_MAX_HOP_COUNT": {
        "value": 25,
        "options": {}
    }
};

var FieldType = exports.FieldType = {
    "FT_DEFAULT": {
        "value": 0,
        "options": {}
    },
    "FT_CALLBACK": {
        "value": 1,
        "options": {}
    },
    "FT_POINTER": {
        "value": 4,
        "options": {}
    },
    "FT_STATIC": {
        "value": 2,
        "options": {}
    },
    "FT_IGNORE": {
        "value": 3,
        "options": {}
    },
    "FT_INLINE": {
        "value": 5,
        "options": {}
    }
};

var IntSize = exports.IntSize = {
    "IS_DEFAULT": {
        "value": 0,
        "options": {}
    },
    "IS_8": {
        "value": 8,
        "options": {}
    },
    "IS_16": {
        "value": 16,
        "options": {}
    },
    "IS_32": {
        "value": 32,
        "options": {}
    },
    "IS_64": {
        "value": 64,
        "options": {}
    }
};

var FieldType = exports.FieldType = {
    "FT_DEFAULT": {
        "value": 0,
        "options": {}
    },
    "FT_CALLBACK": {
        "value": 1,
        "options": {}
    },
    "FT_POINTER": {
        "value": 4,
        "options": {}
    },
    "FT_STATIC": {
        "value": 2,
        "options": {}
    },
    "FT_IGNORE": {
        "value": 3,
        "options": {}
    },
    "FT_INLINE": {
        "value": 5,
        "options": {}
    }
};

var IntSize = exports.IntSize = {
    "IS_DEFAULT": {
        "value": 0,
        "options": {}
    },
    "IS_8": {
        "value": 8,
        "options": {}
    },
    "IS_16": {
        "value": 16,
        "options": {}
    },
    "IS_32": {
        "value": 32,
        "options": {}
    },
    "IS_64": {
        "value": 64,
        "options": {}
    }
};

var ErrorCode = exports.ErrorCode = {
    "OK": {
        "value": 0,
        "options": {}
    },
    "INTERNAL_ERROR": {
        "value": 1,
        "options": {}
    },
    "INVALID_SINK_ID": {
        "value": 2,
        "options": {}
    },
    "INVALID_ROLE": {
        "value": 3,
        "options": {}
    },
    "INVALID_NETWORK_ADDRESS": {
        "value": 4,
        "options": {}
    },
    "INVALID_NETWORK_CHANNEL": {
        "value": 5,
        "options": {}
    },
    "INVALID_CHANNEL_MAP": {
        "value": 6,
        "options": {}
    },
    "INVALID_NETWORK_KEYS": {
        "value": 7,
        "options": {}
    },
    "INVALID_AC_RANGE": {
        "value": 8,
        "options": {}
    },
    "INVALID_SINK_STATE": {
        "value": 9,
        "options": {}
    },
    "INVALID_DEST_ADDRESS": {
        "value": 10,
        "options": {}
    },
    "INVALID_DEST_ENDPOINT": {
        "value": 11,
        "options": {}
    },
    "INVALID_SRC_ENDPOINT": {
        "value": 12,
        "options": {}
    },
    "INVALID_QOS": {
        "value": 13,
        "options": {}
    },
    "INVALID_DATA_PAYLOAD": {
        "value": 14,
        "options": {}
    },
    "INVALID_SCRATCHPAD": {
        "value": 15,
        "options": {}
    },
    "INVALID_SCRATCHPAD_SIZE": {
        "value": 16,
        "options": {}
    },
    "INVLAID_SEQUENCE_NUMBER": {
        "value": 17,
        "options": {}
    },
    "INVALID_REBOOT_DELAY": {
        "value": 18,
        "options": {}
    },
    "INVALID_DIAG_INTERVAL": {
        "value": 19,
        "options": {}
    },
    "INVALID_APP_CONFIG": {
        "value": 20,
        "options": {}
    },
    "INVALID_PARAM": {
        "value": 21,
        "options": {}
    },
    "NO_SCRATCHPAD_PRESENT": {
        "value": 22,
        "options": {}
    },
    "ACCESS_DENIED": {
        "value": 23,
        "options": {}
    },
    "REQUEST_NEEDS_SINK_ID": {
        "value": 24,
        "options": {}
    },
    "INVALID_MAX_HOP_COUNT": {
        "value": 25,
        "options": {}
    }
};

// WirepasMessage ========================================

var WirepasMessage = exports.WirepasMessage = {};

WirepasMessage.read = function (pbf, end) {
    return pbf.readFields(WirepasMessage._readField, { status_event: null, get_configs_req: null, get_configs_resp: null, set_config_req: null, set_config_resp: null, send_packet_req: null, send_packet_resp: null, packet_received_event: null, get_scratchpad_status_req: null, get_scratchpad_status_resp: null, upload_scratchpad_req: null, upload_scratchpad_resp: null, process_scratchpad_req: null, process_scratchpad_resp: null, get_gateway_info_req: null, get_gateway_info_resp: null }, end);
};
WirepasMessage._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.status_event = StatusEvent.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.get_configs_req = GetConfigsReq.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.get_configs_resp = GetConfigsResp.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 4) obj.set_config_req = SetConfigReq.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 5) obj.set_config_resp = SetConfigResp.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 6) obj.send_packet_req = SendPacketReq.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 7) obj.send_packet_resp = SendPacketResp.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 8) obj.packet_received_event = PacketReceivedEvent.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 9) obj.get_scratchpad_status_req = GetScratchpadStatusReq.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 10) obj.get_scratchpad_status_resp = GetScratchpadStatusResp.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 11) obj.upload_scratchpad_req = UploadScratchpadReq.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 12) obj.upload_scratchpad_resp = UploadScratchpadResp.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 13) obj.process_scratchpad_req = ProcessScratchpadReq.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 14) obj.process_scratchpad_resp = ProcessScratchpadResp.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 15) obj.get_gateway_info_req = GetGwInfoReq.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 16) obj.get_gateway_info_resp = GetGwInfoResp.read(pbf, pbf.readVarint() + pbf.pos);
};
WirepasMessage.write = function (obj, pbf) {
    if (obj.status_event) pbf.writeMessage(1, StatusEvent.write, obj.status_event);
    if (obj.get_configs_req) pbf.writeMessage(2, GetConfigsReq.write, obj.get_configs_req);
    if (obj.get_configs_resp) pbf.writeMessage(3, GetConfigsResp.write, obj.get_configs_resp);
    if (obj.set_config_req) pbf.writeMessage(4, SetConfigReq.write, obj.set_config_req);
    if (obj.set_config_resp) pbf.writeMessage(5, SetConfigResp.write, obj.set_config_resp);
    if (obj.send_packet_req) pbf.writeMessage(6, SendPacketReq.write, obj.send_packet_req);
    if (obj.send_packet_resp) pbf.writeMessage(7, SendPacketResp.write, obj.send_packet_resp);
    if (obj.packet_received_event) pbf.writeMessage(8, PacketReceivedEvent.write, obj.packet_received_event);
    if (obj.get_scratchpad_status_req) pbf.writeMessage(9, GetScratchpadStatusReq.write, obj.get_scratchpad_status_req);
    if (obj.get_scratchpad_status_resp) pbf.writeMessage(10, GetScratchpadStatusResp.write, obj.get_scratchpad_status_resp);
    if (obj.upload_scratchpad_req) pbf.writeMessage(11, UploadScratchpadReq.write, obj.upload_scratchpad_req);
    if (obj.upload_scratchpad_resp) pbf.writeMessage(12, UploadScratchpadResp.write, obj.upload_scratchpad_resp);
    if (obj.process_scratchpad_req) pbf.writeMessage(13, ProcessScratchpadReq.write, obj.process_scratchpad_req);
    if (obj.process_scratchpad_resp) pbf.writeMessage(14, ProcessScratchpadResp.write, obj.process_scratchpad_resp);
    if (obj.get_gateway_info_req) pbf.writeMessage(15, GetGwInfoReq.write, obj.get_gateway_info_req);
    if (obj.get_gateway_info_resp) pbf.writeMessage(16, GetGwInfoResp.write, obj.get_gateway_info_resp);
};

// CustomerMessage ========================================

var CustomerMessage = exports.CustomerMessage = {};

CustomerMessage.read = function (pbf, end) {
    return pbf.readFields(CustomerMessage._readField, { customer_name: "" }, end);
};
CustomerMessage._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.customer_name = pbf.readString();
};
CustomerMessage.write = function (obj, pbf) {
    if (obj.customer_name) pbf.writeStringField(1, obj.customer_name);
};

// GenericMessage ========================================

var GenericMessage = exports.GenericMessage = {};

GenericMessage.read = function (pbf, end) {
    return pbf.readFields(GenericMessage._readField, { wirepas: null, customer: null }, end);
};
GenericMessage._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.wirepas = WirepasMessage.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.customer = CustomerMessage.read(pbf, pbf.readVarint() + pbf.pos);
};
GenericMessage.write = function (obj, pbf) {
    if (obj.wirepas) pbf.writeMessage(1, WirepasMessage.write, obj.wirepas);
    if (obj.customer) pbf.writeMessage(2, CustomerMessage.write, obj.customer);
};

// NodeRole ========================================

var NodeRole = exports.NodeRole = {};

NodeRole.read = function (pbf, end) {
    return pbf.readFields(NodeRole._readField, { role: 0, flags: [] }, end);
};
NodeRole._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.role = pbf.readVarint();
    else if (tag === 2) pbf.readPackedVarint(obj.flags);
};
NodeRole.write = function (obj, pbf) {
    if (obj.role) pbf.writeVarintField(1, obj.role);
    if (obj.flags) for (var i = 0; i < obj.flags.length; i++) pbf.writeVarintField(2, obj.flags[i]);
};

NodeRole.BaseRole = {
    "SINK": {
        "value": 1,
        "options": {}
    },
    "ROUTER": {
        "value": 2,
        "options": {}
    },
    "NON_ROUTER": {
        "value": 3,
        "options": {}
    }
};

NodeRole.RoleFlags = {
    "LOW_LATENCY": {
        "value": 1,
        "options": {}
    },
    "AUTOROLE": {
        "value": 2,
        "options": {}
    }
};

// AccessCycleRange ========================================

var AccessCycleRange = exports.AccessCycleRange = {};

AccessCycleRange.read = function (pbf, end) {
    return pbf.readFields(AccessCycleRange._readField, { min_ms: 0, max_ms: 0 }, end);
};
AccessCycleRange._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.min_ms = pbf.readVarint();
    else if (tag === 2) obj.max_ms = pbf.readVarint();
};
AccessCycleRange.write = function (obj, pbf) {
    if (obj.min_ms) pbf.writeVarintField(1, obj.min_ms);
    if (obj.max_ms) pbf.writeVarintField(2, obj.max_ms);
};

// ChannelRange ========================================

var ChannelRange = exports.ChannelRange = {};

ChannelRange.read = function (pbf, end) {
    return pbf.readFields(ChannelRange._readField, { min_channel: 0, max_channel: 0 }, end);
};
ChannelRange._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.min_channel = pbf.readVarint();
    else if (tag === 2) obj.max_channel = pbf.readVarint();
};
ChannelRange.write = function (obj, pbf) {
    if (obj.min_channel) pbf.writeVarintField(1, obj.min_channel);
    if (obj.max_channel) pbf.writeVarintField(2, obj.max_channel);
};

// AppConfigData ========================================

var AppConfigData = exports.AppConfigData = {};

AppConfigData.read = function (pbf, end) {
    return pbf.readFields(AppConfigData._readField, { diag_interval_s: 0, app_config_data: null, seq: 0 }, end);
};
AppConfigData._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.diag_interval_s = pbf.readVarint();
    else if (tag === 2) obj.app_config_data = pbf.readBytes();
    else if (tag === 3) obj.seq = pbf.readVarint();
};
AppConfigData.write = function (obj, pbf) {
    if (obj.diag_interval_s) pbf.writeVarintField(1, obj.diag_interval_s);
    if (obj.app_config_data) pbf.writeBytesField(2, obj.app_config_data);
    if (obj.seq) pbf.writeVarintField(3, obj.seq);
};

// NetworkKeys ========================================

var NetworkKeys = exports.NetworkKeys = {};

NetworkKeys.read = function (pbf, end) {
    return pbf.readFields(NetworkKeys._readField, { cipher: null, authentication: null }, end);
};
NetworkKeys._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.cipher = pbf.readBytes();
    else if (tag === 2) obj.authentication = pbf.readBytes();
};
NetworkKeys.write = function (obj, pbf) {
    if (obj.cipher) pbf.writeBytesField(1, obj.cipher);
    if (obj.authentication) pbf.writeBytesField(2, obj.authentication);
};

// SinkReadConfig ========================================

var SinkReadConfig = exports.SinkReadConfig = {};

SinkReadConfig.read = function (pbf, end) {
    return pbf.readFields(SinkReadConfig._readField, { sink_id: "", node_role: null, node_address: 0, network_address: 0, network_channel: 0, app_config: null, channel_map: 0, are_keys_set: false, current_ac_range: null, ac_limits: null, max_mtu: 0, channel_limits: null, hw_magic: 0, stack_profile: 0, app_config_max_size: 0, firmware_version: null, sink_state: 0 }, end);
};
SinkReadConfig._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.sink_id = pbf.readString();
    else if (tag === 2) obj.node_role = NodeRole.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.node_address = pbf.readVarint();
    else if (tag === 4) obj.network_address = pbf.readVarint();
    else if (tag === 5) obj.network_channel = pbf.readVarint();
    else if (tag === 6) obj.app_config = AppConfigData.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 7) obj.channel_map = pbf.readVarint();
    else if (tag === 8) obj.are_keys_set = pbf.readBoolean();
    else if (tag === 9) obj.current_ac_range = AccessCycleRange.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 10) obj.ac_limits = AccessCycleRange.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 11) obj.max_mtu = pbf.readVarint();
    else if (tag === 12) obj.channel_limits = ChannelRange.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 13) obj.hw_magic = pbf.readVarint();
    else if (tag === 14) obj.stack_profile = pbf.readVarint();
    else if (tag === 15) obj.app_config_max_size = pbf.readVarint();
    else if (tag === 16) obj.firmware_version = FirmwareVersion.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 17) obj.sink_state = pbf.readVarint();
};
SinkReadConfig.write = function (obj, pbf) {
    if (obj.sink_id) pbf.writeStringField(1, obj.sink_id);
    if (obj.node_role) pbf.writeMessage(2, NodeRole.write, obj.node_role);
    if (obj.node_address) pbf.writeVarintField(3, obj.node_address);
    if (obj.network_address) pbf.writeVarintField(4, obj.network_address);
    if (obj.network_channel) pbf.writeVarintField(5, obj.network_channel);
    if (obj.app_config) pbf.writeMessage(6, AppConfigData.write, obj.app_config);
    if (obj.channel_map) pbf.writeVarintField(7, obj.channel_map);
    if (obj.are_keys_set) pbf.writeBooleanField(8, obj.are_keys_set);
    if (obj.current_ac_range) pbf.writeMessage(9, AccessCycleRange.write, obj.current_ac_range);
    if (obj.ac_limits) pbf.writeMessage(10, AccessCycleRange.write, obj.ac_limits);
    if (obj.max_mtu) pbf.writeVarintField(11, obj.max_mtu);
    if (obj.channel_limits) pbf.writeMessage(12, ChannelRange.write, obj.channel_limits);
    if (obj.hw_magic) pbf.writeVarintField(13, obj.hw_magic);
    if (obj.stack_profile) pbf.writeVarintField(14, obj.stack_profile);
    if (obj.app_config_max_size) pbf.writeVarintField(15, obj.app_config_max_size);
    if (obj.firmware_version) pbf.writeMessage(16, FirmwareVersion.write, obj.firmware_version);
    if (obj.sink_state) pbf.writeVarintField(17, obj.sink_state);
};

// SinkNewConfig ========================================

var SinkNewConfig = exports.SinkNewConfig = {};

SinkNewConfig.read = function (pbf, end) {
    return pbf.readFields(SinkNewConfig._readField, { sink_id: "", node_role: null, node_address: 0, network_address: 0, network_channel: 0, app_config: null, channel_map: 0, keys: null, current_ac_range: null, sink_state: 0 }, end);
};
SinkNewConfig._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.sink_id = pbf.readString();
    else if (tag === 2) obj.node_role = NodeRole.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.node_address = pbf.readVarint();
    else if (tag === 4) obj.network_address = pbf.readVarint();
    else if (tag === 5) obj.network_channel = pbf.readVarint();
    else if (tag === 6) obj.app_config = AppConfigData.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 7) obj.channel_map = pbf.readVarint();
    else if (tag === 8) obj.keys = NetworkKeys.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 9) obj.current_ac_range = AccessCycleRange.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 10) obj.sink_state = pbf.readVarint();
};
SinkNewConfig.write = function (obj, pbf) {
    if (obj.sink_id) pbf.writeStringField(1, obj.sink_id);
    if (obj.node_role) pbf.writeMessage(2, NodeRole.write, obj.node_role);
    if (obj.node_address) pbf.writeVarintField(3, obj.node_address);
    if (obj.network_address) pbf.writeVarintField(4, obj.network_address);
    if (obj.network_channel) pbf.writeVarintField(5, obj.network_channel);
    if (obj.app_config) pbf.writeMessage(6, AppConfigData.write, obj.app_config);
    if (obj.channel_map) pbf.writeVarintField(7, obj.channel_map);
    if (obj.keys) pbf.writeMessage(8, NetworkKeys.write, obj.keys);
    if (obj.current_ac_range) pbf.writeMessage(9, AccessCycleRange.write, obj.current_ac_range);
    if (obj.sink_state) pbf.writeVarintField(10, obj.sink_state);
};

// GatewayInfo ========================================

var GatewayInfo = exports.GatewayInfo = {};

GatewayInfo.read = function (pbf, end) {
    return pbf.readFields(GatewayInfo._readField, { current_time_s_epoch: 0, gw_model: "", gw_version: "", implemented_api_version: 0 }, end);
};
GatewayInfo._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.current_time_s_epoch = pbf.readVarint();
    else if (tag === 2) obj.gw_model = pbf.readString();
    else if (tag === 3) obj.gw_version = pbf.readString();
    else if (tag === 4) obj.implemented_api_version = pbf.readVarint();
};
GatewayInfo.write = function (obj, pbf) {
    if (obj.current_time_s_epoch) pbf.writeVarintField(1, obj.current_time_s_epoch);
    if (obj.gw_model) pbf.writeStringField(2, obj.gw_model);
    if (obj.gw_version) pbf.writeStringField(3, obj.gw_version);
    if (obj.implemented_api_version) pbf.writeVarintField(4, obj.implemented_api_version);
};

// StatusEvent ========================================

var StatusEvent = exports.StatusEvent = {};

StatusEvent.read = function (pbf, end) {
    return pbf.readFields(StatusEvent._readField, { header: null, version: 0, state: 0 }, end);
};
StatusEvent._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.header = EventHeader.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.version = pbf.readVarint();
    else if (tag === 3) obj.state = pbf.readVarint();
};
StatusEvent.write = function (obj, pbf) {
    if (obj.header) pbf.writeMessage(1, EventHeader.write, obj.header);
    if (obj.version) pbf.writeVarintField(2, obj.version);
    if (obj.state) pbf.writeVarintField(3, obj.state);
};

// GetConfigsReq ========================================

var GetConfigsReq = exports.GetConfigsReq = {};

GetConfigsReq.read = function (pbf, end) {
    return pbf.readFields(GetConfigsReq._readField, { header: null }, end);
};
GetConfigsReq._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.header = RequestHeader.read(pbf, pbf.readVarint() + pbf.pos);
};
GetConfigsReq.write = function (obj, pbf) {
    if (obj.header) pbf.writeMessage(1, RequestHeader.write, obj.header);
};

// GetConfigsResp ========================================

var GetConfigsResp = exports.GetConfigsResp = {};

GetConfigsResp.read = function (pbf, end) {
    return pbf.readFields(GetConfigsResp._readField, { header: null, configs: [] }, end);
};
GetConfigsResp._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.header = ResponseHeader.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.configs.push(SinkReadConfig.read(pbf, pbf.readVarint() + pbf.pos));
};
GetConfigsResp.write = function (obj, pbf) {
    if (obj.header) pbf.writeMessage(1, ResponseHeader.write, obj.header);
    if (obj.configs) for (var i = 0; i < obj.configs.length; i++) pbf.writeMessage(2, SinkReadConfig.write, obj.configs[i]);
};

// SetConfigReq ========================================

var SetConfigReq = exports.SetConfigReq = {};

SetConfigReq.read = function (pbf, end) {
    return pbf.readFields(SetConfigReq._readField, { header: null, config: null }, end);
};
SetConfigReq._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.header = RequestHeader.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.config = SinkNewConfig.read(pbf, pbf.readVarint() + pbf.pos);
};
SetConfigReq.write = function (obj, pbf) {
    if (obj.header) pbf.writeMessage(1, RequestHeader.write, obj.header);
    if (obj.config) pbf.writeMessage(2, SinkNewConfig.write, obj.config);
};

// SetConfigResp ========================================

var SetConfigResp = exports.SetConfigResp = {};

SetConfigResp.read = function (pbf, end) {
    return pbf.readFields(SetConfigResp._readField, { header: null, config: null }, end);
};
SetConfigResp._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.header = ResponseHeader.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.config = SinkReadConfig.read(pbf, pbf.readVarint() + pbf.pos);
};
SetConfigResp.write = function (obj, pbf) {
    if (obj.header) pbf.writeMessage(1, ResponseHeader.write, obj.header);
    if (obj.config) pbf.writeMessage(2, SinkReadConfig.write, obj.config);
};

// GetGwInfoReq ========================================

var GetGwInfoReq = exports.GetGwInfoReq = {};

GetGwInfoReq.read = function (pbf, end) {
    return pbf.readFields(GetGwInfoReq._readField, { header: null }, end);
};
GetGwInfoReq._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.header = RequestHeader.read(pbf, pbf.readVarint() + pbf.pos);
};
GetGwInfoReq.write = function (obj, pbf) {
    if (obj.header) pbf.writeMessage(1, RequestHeader.write, obj.header);
};

// GetGwInfoResp ========================================

var GetGwInfoResp = exports.GetGwInfoResp = {};

GetGwInfoResp.read = function (pbf, end) {
    return pbf.readFields(GetGwInfoResp._readField, { header: null, info: null }, end);
};
GetGwInfoResp._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.header = ResponseHeader.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.info = GatewayInfo.read(pbf, pbf.readVarint() + pbf.pos);
};
GetGwInfoResp.write = function (obj, pbf) {
    if (obj.header) pbf.writeMessage(1, ResponseHeader.write, obj.header);
    if (obj.info) pbf.writeMessage(2, GatewayInfo.write, obj.info);
};

// NanoPBOptions ========================================

var NanoPBOptions = exports.NanoPBOptions = {};

NanoPBOptions.read = function (pbf, end) {
    return pbf.readFields(NanoPBOptions._readField, { max_size: 0, max_length: 0, max_count: 0, int_size: { "value": 0, "options": {} }, type: { "value": 0, "options": {} }, long_names: true, packed_struct: false, packed_enum: false, skip_message: false, no_unions: false, msgid: 0, anonymous_oneof: false, proto3: false, enum_to_string: false, fixed_length: false }, end);
};
NanoPBOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.max_size = pbf.readVarint(true);
    else if (tag === 14) obj.max_length = pbf.readVarint(true);
    else if (tag === 2) obj.max_count = pbf.readVarint(true);
    else if (tag === 7) obj.int_size = pbf.readVarint();
    else if (tag === 3) obj.type = pbf.readVarint();
    else if (tag === 4) obj.long_names = pbf.readBoolean();
    else if (tag === 5) obj.packed_struct = pbf.readBoolean();
    else if (tag === 10) obj.packed_enum = pbf.readBoolean();
    else if (tag === 6) obj.skip_message = pbf.readBoolean();
    else if (tag === 8) obj.no_unions = pbf.readBoolean();
    else if (tag === 9) obj.msgid = pbf.readVarint();
    else if (tag === 11) obj.anonymous_oneof = pbf.readBoolean();
    else if (tag === 12) obj.proto3 = pbf.readBoolean();
    else if (tag === 13) obj.enum_to_string = pbf.readBoolean();
    else if (tag === 15) obj.fixed_length = pbf.readBoolean();
};
NanoPBOptions.write = function (obj, pbf) {
    if (obj.max_size) pbf.writeVarintField(1, obj.max_size);
    if (obj.max_length) pbf.writeVarintField(14, obj.max_length);
    if (obj.max_count) pbf.writeVarintField(2, obj.max_count);
    if (obj.int_size != undefined && obj.int_size !== { "value": 0, "options": {} }) pbf.writeVarintField(7, obj.int_size);
    if (obj.type != undefined && obj.type !== { "value": 0, "options": {} }) pbf.writeVarintField(3, obj.type);
    if (obj.long_names != undefined && obj.long_names !== true) pbf.writeBooleanField(4, obj.long_names);
    if (obj.packed_struct) pbf.writeBooleanField(5, obj.packed_struct);
    if (obj.packed_enum) pbf.writeBooleanField(10, obj.packed_enum);
    if (obj.skip_message) pbf.writeBooleanField(6, obj.skip_message);
    if (obj.no_unions) pbf.writeBooleanField(8, obj.no_unions);
    if (obj.msgid) pbf.writeVarintField(9, obj.msgid);
    if (obj.anonymous_oneof) pbf.writeBooleanField(11, obj.anonymous_oneof);
    if (obj.proto3) pbf.writeBooleanField(12, obj.proto3);
    if (obj.enum_to_string) pbf.writeBooleanField(13, obj.enum_to_string);
    if (obj.fixed_length) pbf.writeBooleanField(15, obj.fixed_length);
};

// FileDescriptorSet ========================================

var FileDescriptorSet = exports.FileDescriptorSet = {};

FileDescriptorSet.read = function (pbf, end) {
    return pbf.readFields(FileDescriptorSet._readField, { file: [] }, end);
};
FileDescriptorSet._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.file.push(FileDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
};
FileDescriptorSet.write = function (obj, pbf) {
    if (obj.file) for (var i = 0; i < obj.file.length; i++) pbf.writeMessage(1, FileDescriptorProto.write, obj.file[i]);
};

// FileDescriptorProto ========================================

var FileDescriptorProto = exports.FileDescriptorProto = {};

FileDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(FileDescriptorProto._readField, { name: "", package: "", dependency: [], message_type: [], enum_type: [], service: [], extension: [], options: null, source_code_info: null }, end);
};
FileDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.package = pbf.readString();
    else if (tag === 3) obj.dependency.push(pbf.readString());
    else if (tag === 4) obj.message_type.push(DescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 5) obj.enum_type.push(EnumDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 6) obj.service.push(ServiceDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 7) obj.extension.push(FieldDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 8) obj.options = FileOptions.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 9) obj.source_code_info = SourceCodeInfo.read(pbf, pbf.readVarint() + pbf.pos);
};
FileDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.package) pbf.writeStringField(2, obj.package);
    if (obj.dependency) for (var i = 0; i < obj.dependency.length; i++) pbf.writeStringField(3, obj.dependency[i]);
    if (obj.message_type) for (i = 0; i < obj.message_type.length; i++) pbf.writeMessage(4, DescriptorProto.write, obj.message_type[i]);
    if (obj.enum_type) for (i = 0; i < obj.enum_type.length; i++) pbf.writeMessage(5, EnumDescriptorProto.write, obj.enum_type[i]);
    if (obj.service) for (i = 0; i < obj.service.length; i++) pbf.writeMessage(6, ServiceDescriptorProto.write, obj.service[i]);
    if (obj.extension) for (i = 0; i < obj.extension.length; i++) pbf.writeMessage(7, FieldDescriptorProto.write, obj.extension[i]);
    if (obj.options) pbf.writeMessage(8, FileOptions.write, obj.options);
    if (obj.source_code_info) pbf.writeMessage(9, SourceCodeInfo.write, obj.source_code_info);
};

// DescriptorProto ========================================

var DescriptorProto = exports.DescriptorProto = {};

DescriptorProto.read = function (pbf, end) {
    return pbf.readFields(DescriptorProto._readField, { name: "", field: [], extension: [], nested_type: [], enum_type: [], extension_range: [], options: null }, end);
};
DescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.field.push(FieldDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 6) obj.extension.push(FieldDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.nested_type.push(DescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 4) obj.enum_type.push(EnumDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 5) obj.extension_range.push(DescriptorProto.ExtensionRange.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 7) obj.options = MessageOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
DescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.field) for (var i = 0; i < obj.field.length; i++) pbf.writeMessage(2, FieldDescriptorProto.write, obj.field[i]);
    if (obj.extension) for (i = 0; i < obj.extension.length; i++) pbf.writeMessage(6, FieldDescriptorProto.write, obj.extension[i]);
    if (obj.nested_type) for (i = 0; i < obj.nested_type.length; i++) pbf.writeMessage(3, DescriptorProto.write, obj.nested_type[i]);
    if (obj.enum_type) for (i = 0; i < obj.enum_type.length; i++) pbf.writeMessage(4, EnumDescriptorProto.write, obj.enum_type[i]);
    if (obj.extension_range) for (i = 0; i < obj.extension_range.length; i++) pbf.writeMessage(5, DescriptorProto.ExtensionRange.write, obj.extension_range[i]);
    if (obj.options) pbf.writeMessage(7, MessageOptions.write, obj.options);
};

// DescriptorProto.ExtensionRange ========================================

DescriptorProto.ExtensionRange = {};

DescriptorProto.ExtensionRange.read = function (pbf, end) {
    return pbf.readFields(DescriptorProto.ExtensionRange._readField, { start: 0, end: 0 }, end);
};
DescriptorProto.ExtensionRange._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.start = pbf.readVarint(true);
    else if (tag === 2) obj.end = pbf.readVarint(true);
};
DescriptorProto.ExtensionRange.write = function (obj, pbf) {
    if (obj.start) pbf.writeVarintField(1, obj.start);
    if (obj.end) pbf.writeVarintField(2, obj.end);
};

// FieldDescriptorProto ========================================

var FieldDescriptorProto = exports.FieldDescriptorProto = {};

FieldDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(FieldDescriptorProto._readField, { name: "", number: 0, label: 0, type: 0, type_name: "", extendee: "", default_value: "", options: null }, end);
};
FieldDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 3) obj.number = pbf.readVarint(true);
    else if (tag === 4) obj.label = pbf.readVarint();
    else if (tag === 5) obj.type = pbf.readVarint();
    else if (tag === 6) obj.type_name = pbf.readString();
    else if (tag === 2) obj.extendee = pbf.readString();
    else if (tag === 7) obj.default_value = pbf.readString();
    else if (tag === 8) obj.options = FieldOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
FieldDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.number) pbf.writeVarintField(3, obj.number);
    if (obj.label) pbf.writeVarintField(4, obj.label);
    if (obj.type) pbf.writeVarintField(5, obj.type);
    if (obj.type_name) pbf.writeStringField(6, obj.type_name);
    if (obj.extendee) pbf.writeStringField(2, obj.extendee);
    if (obj.default_value) pbf.writeStringField(7, obj.default_value);
    if (obj.options) pbf.writeMessage(8, FieldOptions.write, obj.options);
};

FieldDescriptorProto.Type = {
    "TYPE_DOUBLE": {
        "value": 1,
        "options": {}
    },
    "TYPE_FLOAT": {
        "value": 2,
        "options": {}
    },
    "TYPE_INT64": {
        "value": 3,
        "options": {}
    },
    "TYPE_UINT64": {
        "value": 4,
        "options": {}
    },
    "TYPE_INT32": {
        "value": 5,
        "options": {}
    },
    "TYPE_FIXED64": {
        "value": 6,
        "options": {}
    },
    "TYPE_FIXED32": {
        "value": 7,
        "options": {}
    },
    "TYPE_BOOL": {
        "value": 8,
        "options": {}
    },
    "TYPE_STRING": {
        "value": 9,
        "options": {}
    },
    "TYPE_GROUP": {
        "value": 10,
        "options": {}
    },
    "TYPE_MESSAGE": {
        "value": 11,
        "options": {}
    },
    "TYPE_BYTES": {
        "value": 12,
        "options": {}
    },
    "TYPE_UINT32": {
        "value": 13,
        "options": {}
    },
    "TYPE_ENUM": {
        "value": 14,
        "options": {}
    },
    "TYPE_SFIXED32": {
        "value": 15,
        "options": {}
    },
    "TYPE_SFIXED64": {
        "value": 16,
        "options": {}
    },
    "TYPE_SINT32": {
        "value": 17,
        "options": {}
    },
    "TYPE_SINT64": {
        "value": 18,
        "options": {}
    }
};

FieldDescriptorProto.Label = {
    "LABEL_OPTIONAL": {
        "value": 1,
        "options": {}
    },
    "LABEL_REQUIRED": {
        "value": 2,
        "options": {}
    },
    "LABEL_REPEATED": {
        "value": 3,
        "options": {}
    }
};

// EnumDescriptorProto ========================================

var EnumDescriptorProto = exports.EnumDescriptorProto = {};

EnumDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(EnumDescriptorProto._readField, { name: "", value: [], options: null }, end);
};
EnumDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.value.push(EnumValueDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.options = EnumOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
EnumDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.value) for (var i = 0; i < obj.value.length; i++) pbf.writeMessage(2, EnumValueDescriptorProto.write, obj.value[i]);
    if (obj.options) pbf.writeMessage(3, EnumOptions.write, obj.options);
};

// EnumValueDescriptorProto ========================================

var EnumValueDescriptorProto = exports.EnumValueDescriptorProto = {};

EnumValueDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(EnumValueDescriptorProto._readField, { name: "", number: 0, options: null }, end);
};
EnumValueDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.number = pbf.readVarint(true);
    else if (tag === 3) obj.options = EnumValueOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
EnumValueDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.number) pbf.writeVarintField(2, obj.number);
    if (obj.options) pbf.writeMessage(3, EnumValueOptions.write, obj.options);
};

// ServiceDescriptorProto ========================================

var ServiceDescriptorProto = exports.ServiceDescriptorProto = {};

ServiceDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(ServiceDescriptorProto._readField, { name: "", method: [], options: null }, end);
};
ServiceDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.method.push(MethodDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.options = ServiceOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
ServiceDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.method) for (var i = 0; i < obj.method.length; i++) pbf.writeMessage(2, MethodDescriptorProto.write, obj.method[i]);
    if (obj.options) pbf.writeMessage(3, ServiceOptions.write, obj.options);
};

// MethodDescriptorProto ========================================

var MethodDescriptorProto = exports.MethodDescriptorProto = {};

MethodDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(MethodDescriptorProto._readField, { name: "", input_type: "", output_type: "", options: null }, end);
};
MethodDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.input_type = pbf.readString();
    else if (tag === 3) obj.output_type = pbf.readString();
    else if (tag === 4) obj.options = MethodOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
MethodDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.input_type) pbf.writeStringField(2, obj.input_type);
    if (obj.output_type) pbf.writeStringField(3, obj.output_type);
    if (obj.options) pbf.writeMessage(4, MethodOptions.write, obj.options);
};

// FileOptions ========================================

var FileOptions = exports.FileOptions = {};

FileOptions.read = function (pbf, end) {
    return pbf.readFields(FileOptions._readField, { java_package: "", java_outer_classname: "", java_multiple_files: false, java_generate_equals_and_hash: false, optimize_for: { "value": 1, "options": {} }, cc_generic_services: false, java_generic_services: false, py_generic_services: false, uninterpreted_option: [] }, end);
};
FileOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.java_package = pbf.readString();
    else if (tag === 8) obj.java_outer_classname = pbf.readString();
    else if (tag === 10) obj.java_multiple_files = pbf.readBoolean();
    else if (tag === 20) obj.java_generate_equals_and_hash = pbf.readBoolean();
    else if (tag === 9) obj.optimize_for = pbf.readVarint();
    else if (tag === 16) obj.cc_generic_services = pbf.readBoolean();
    else if (tag === 17) obj.java_generic_services = pbf.readBoolean();
    else if (tag === 18) obj.py_generic_services = pbf.readBoolean();
    else if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
FileOptions.write = function (obj, pbf) {
    if (obj.java_package) pbf.writeStringField(1, obj.java_package);
    if (obj.java_outer_classname) pbf.writeStringField(8, obj.java_outer_classname);
    if (obj.java_multiple_files) pbf.writeBooleanField(10, obj.java_multiple_files);
    if (obj.java_generate_equals_and_hash) pbf.writeBooleanField(20, obj.java_generate_equals_and_hash);
    if (obj.optimize_for != undefined && obj.optimize_for !== { "value": 1, "options": {} }) pbf.writeVarintField(9, obj.optimize_for);
    if (obj.cc_generic_services) pbf.writeBooleanField(16, obj.cc_generic_services);
    if (obj.java_generic_services) pbf.writeBooleanField(17, obj.java_generic_services);
    if (obj.py_generic_services) pbf.writeBooleanField(18, obj.py_generic_services);
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

FileOptions.OptimizeMode = {
    "SPEED": {
        "value": 1,
        "options": {}
    },
    "CODE_SIZE": {
        "value": 2,
        "options": {}
    },
    "LITE_RUNTIME": {
        "value": 3,
        "options": {}
    }
};

// MessageOptions ========================================

var MessageOptions = exports.MessageOptions = {};

MessageOptions.read = function (pbf, end) {
    return pbf.readFields(MessageOptions._readField, { message_set_wire_format: false, no_standard_descriptor_accessor: false, uninterpreted_option: [] }, end);
};
MessageOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message_set_wire_format = pbf.readBoolean();
    else if (tag === 2) obj.no_standard_descriptor_accessor = pbf.readBoolean();
    else if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
MessageOptions.write = function (obj, pbf) {
    if (obj.message_set_wire_format) pbf.writeBooleanField(1, obj.message_set_wire_format);
    if (obj.no_standard_descriptor_accessor) pbf.writeBooleanField(2, obj.no_standard_descriptor_accessor);
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// FieldOptions ========================================

var FieldOptions = exports.FieldOptions = {};

FieldOptions.read = function (pbf, end) {
    return pbf.readFields(FieldOptions._readField, { ctype: { "value": 0, "options": {} }, packed: false, deprecated: false, experimental_map_key: "", uninterpreted_option: [] }, end);
};
FieldOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.ctype = pbf.readVarint();
    else if (tag === 2) obj.packed = pbf.readBoolean();
    else if (tag === 3) obj.deprecated = pbf.readBoolean();
    else if (tag === 9) obj.experimental_map_key = pbf.readString();
    else if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
FieldOptions.write = function (obj, pbf) {
    if (obj.ctype != undefined && obj.ctype !== { "value": 0, "options": {} }) pbf.writeVarintField(1, obj.ctype);
    if (obj.packed) pbf.writeBooleanField(2, obj.packed);
    if (obj.deprecated) pbf.writeBooleanField(3, obj.deprecated);
    if (obj.experimental_map_key) pbf.writeStringField(9, obj.experimental_map_key);
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

FieldOptions.CType = {
    "STRING": {
        "value": 0,
        "options": {}
    },
    "CORD": {
        "value": 1,
        "options": {}
    },
    "STRING_PIECE": {
        "value": 2,
        "options": {}
    }
};

// EnumOptions ========================================

var EnumOptions = exports.EnumOptions = {};

EnumOptions.read = function (pbf, end) {
    return pbf.readFields(EnumOptions._readField, { uninterpreted_option: [] }, end);
};
EnumOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
EnumOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// EnumValueOptions ========================================

var EnumValueOptions = exports.EnumValueOptions = {};

EnumValueOptions.read = function (pbf, end) {
    return pbf.readFields(EnumValueOptions._readField, { uninterpreted_option: [] }, end);
};
EnumValueOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
EnumValueOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// ServiceOptions ========================================

var ServiceOptions = exports.ServiceOptions = {};

ServiceOptions.read = function (pbf, end) {
    return pbf.readFields(ServiceOptions._readField, { uninterpreted_option: [] }, end);
};
ServiceOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
ServiceOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// MethodOptions ========================================

var MethodOptions = exports.MethodOptions = {};

MethodOptions.read = function (pbf, end) {
    return pbf.readFields(MethodOptions._readField, { uninterpreted_option: [] }, end);
};
MethodOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
MethodOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// UninterpretedOption ========================================

var UninterpretedOption = exports.UninterpretedOption = {};

UninterpretedOption.read = function (pbf, end) {
    return pbf.readFields(UninterpretedOption._readField, { name: [], identifier_value: "", positive_int_value: 0, negative_int_value: 0, double_value: 0, string_value: null, aggregate_value: "" }, end);
};
UninterpretedOption._readField = function (tag, obj, pbf) {
    if (tag === 2) obj.name.push(UninterpretedOption.NamePart.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.identifier_value = pbf.readString();
    else if (tag === 4) obj.positive_int_value = pbf.readVarint();
    else if (tag === 5) obj.negative_int_value = pbf.readVarint(true);
    else if (tag === 6) obj.double_value = pbf.readDouble();
    else if (tag === 7) obj.string_value = pbf.readBytes();
    else if (tag === 8) obj.aggregate_value = pbf.readString();
};
UninterpretedOption.write = function (obj, pbf) {
    if (obj.name) for (var i = 0; i < obj.name.length; i++) pbf.writeMessage(2, UninterpretedOption.NamePart.write, obj.name[i]);
    if (obj.identifier_value) pbf.writeStringField(3, obj.identifier_value);
    if (obj.positive_int_value) pbf.writeVarintField(4, obj.positive_int_value);
    if (obj.negative_int_value) pbf.writeVarintField(5, obj.negative_int_value);
    if (obj.double_value) pbf.writeDoubleField(6, obj.double_value);
    if (obj.string_value) pbf.writeBytesField(7, obj.string_value);
    if (obj.aggregate_value) pbf.writeStringField(8, obj.aggregate_value);
};

// UninterpretedOption.NamePart ========================================

UninterpretedOption.NamePart = {};

UninterpretedOption.NamePart.read = function (pbf, end) {
    return pbf.readFields(UninterpretedOption.NamePart._readField, { name_part: "", is_extension: false }, end);
};
UninterpretedOption.NamePart._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name_part = pbf.readString();
    else if (tag === 2) obj.is_extension = pbf.readBoolean();
};
UninterpretedOption.NamePart.write = function (obj, pbf) {
    if (obj.name_part) pbf.writeStringField(1, obj.name_part);
    if (obj.is_extension) pbf.writeBooleanField(2, obj.is_extension);
};

// SourceCodeInfo ========================================

var SourceCodeInfo = exports.SourceCodeInfo = {};

SourceCodeInfo.read = function (pbf, end) {
    return pbf.readFields(SourceCodeInfo._readField, { location: [] }, end);
};
SourceCodeInfo._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.location.push(SourceCodeInfo.Location.read(pbf, pbf.readVarint() + pbf.pos));
};
SourceCodeInfo.write = function (obj, pbf) {
    if (obj.location) for (var i = 0; i < obj.location.length; i++) pbf.writeMessage(1, SourceCodeInfo.Location.write, obj.location[i]);
};

// SourceCodeInfo.Location ========================================

SourceCodeInfo.Location = {};

SourceCodeInfo.Location.read = function (pbf, end) {
    return pbf.readFields(SourceCodeInfo.Location._readField, { path: [], span: [] }, end);
};
SourceCodeInfo.Location._readField = function (tag, obj, pbf) {
    if (tag === 1) pbf.readPackedVarint(obj.path, true);
    else if (tag === 2) pbf.readPackedVarint(obj.span, true);
};
SourceCodeInfo.Location.write = function (obj, pbf) {
    if (obj.path) pbf.writePackedVarint(1, obj.path);
    if (obj.span) pbf.writePackedVarint(2, obj.span);
};

// RequestHeader ========================================

var RequestHeader = exports.RequestHeader = {};

RequestHeader.read = function (pbf, end) {
    return pbf.readFields(RequestHeader._readField, { req_id: 0, sink_id: "" }, end);
};
RequestHeader._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.req_id = pbf.readVarint();
    else if (tag === 2) obj.sink_id = pbf.readString();
};
RequestHeader.write = function (obj, pbf) {
    if (obj.req_id) pbf.writeVarintField(1, obj.req_id);
    if (obj.sink_id) pbf.writeStringField(2, obj.sink_id);
};

// ResponseHeader ========================================

var ResponseHeader = exports.ResponseHeader = {};

ResponseHeader.read = function (pbf, end) {
    return pbf.readFields(ResponseHeader._readField, { req_id: 0, gw_id: "", sink_id: "", res: 0 }, end);
};
ResponseHeader._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.req_id = pbf.readVarint();
    else if (tag === 2) obj.gw_id = pbf.readString();
    else if (tag === 3) obj.sink_id = pbf.readString();
    else if (tag === 4) obj.res = pbf.readVarint();
};
ResponseHeader.write = function (obj, pbf) {
    if (obj.req_id) pbf.writeVarintField(1, obj.req_id);
    if (obj.gw_id) pbf.writeStringField(2, obj.gw_id);
    if (obj.sink_id) pbf.writeStringField(3, obj.sink_id);
    if (obj.res) pbf.writeVarintField(4, obj.res);
};

// EventHeader ========================================

var EventHeader = exports.EventHeader = {};

EventHeader.read = function (pbf, end) {
    return pbf.readFields(EventHeader._readField, { gw_id: "", sink_id: "", event_id: 0 }, end);
};
EventHeader._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.gw_id = pbf.readString();
    else if (tag === 2) obj.sink_id = pbf.readString();
    else if (tag === 3) obj.event_id = pbf.readVarint();
};
EventHeader.write = function (obj, pbf) {
    if (obj.gw_id) pbf.writeStringField(1, obj.gw_id);
    if (obj.sink_id) pbf.writeStringField(2, obj.sink_id);
    if (obj.event_id) pbf.writeVarintField(3, obj.event_id);
};

// FirmwareVersion ========================================

var FirmwareVersion = exports.FirmwareVersion = {};

FirmwareVersion.read = function (pbf, end) {
    return pbf.readFields(FirmwareVersion._readField, { major: 0, minor: 0, maint: 0, dev: 0 }, end);
};
FirmwareVersion._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.major = pbf.readVarint();
    else if (tag === 2) obj.minor = pbf.readVarint();
    else if (tag === 3) obj.maint = pbf.readVarint();
    else if (tag === 4) obj.dev = pbf.readVarint();
};
FirmwareVersion.write = function (obj, pbf) {
    if (obj.major) pbf.writeVarintField(1, obj.major);
    if (obj.minor) pbf.writeVarintField(2, obj.minor);
    if (obj.maint) pbf.writeVarintField(3, obj.maint);
    if (obj.dev) pbf.writeVarintField(4, obj.dev);
};

// NanoPBOptions ========================================

var NanoPBOptions = exports.NanoPBOptions = {};

NanoPBOptions.read = function (pbf, end) {
    return pbf.readFields(NanoPBOptions._readField, { max_size: 0, max_length: 0, max_count: 0, int_size: { "value": 0, "options": {} }, type: { "value": 0, "options": {} }, long_names: true, packed_struct: false, packed_enum: false, skip_message: false, no_unions: false, msgid: 0, anonymous_oneof: false, proto3: false, enum_to_string: false, fixed_length: false }, end);
};
NanoPBOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.max_size = pbf.readVarint(true);
    else if (tag === 14) obj.max_length = pbf.readVarint(true);
    else if (tag === 2) obj.max_count = pbf.readVarint(true);
    else if (tag === 7) obj.int_size = pbf.readVarint();
    else if (tag === 3) obj.type = pbf.readVarint();
    else if (tag === 4) obj.long_names = pbf.readBoolean();
    else if (tag === 5) obj.packed_struct = pbf.readBoolean();
    else if (tag === 10) obj.packed_enum = pbf.readBoolean();
    else if (tag === 6) obj.skip_message = pbf.readBoolean();
    else if (tag === 8) obj.no_unions = pbf.readBoolean();
    else if (tag === 9) obj.msgid = pbf.readVarint();
    else if (tag === 11) obj.anonymous_oneof = pbf.readBoolean();
    else if (tag === 12) obj.proto3 = pbf.readBoolean();
    else if (tag === 13) obj.enum_to_string = pbf.readBoolean();
    else if (tag === 15) obj.fixed_length = pbf.readBoolean();
};
NanoPBOptions.write = function (obj, pbf) {
    if (obj.max_size) pbf.writeVarintField(1, obj.max_size);
    if (obj.max_length) pbf.writeVarintField(14, obj.max_length);
    if (obj.max_count) pbf.writeVarintField(2, obj.max_count);
    if (obj.int_size != undefined && obj.int_size !== { "value": 0, "options": {} }) pbf.writeVarintField(7, obj.int_size);
    if (obj.type != undefined && obj.type !== { "value": 0, "options": {} }) pbf.writeVarintField(3, obj.type);
    if (obj.long_names != undefined && obj.long_names !== true) pbf.writeBooleanField(4, obj.long_names);
    if (obj.packed_struct) pbf.writeBooleanField(5, obj.packed_struct);
    if (obj.packed_enum) pbf.writeBooleanField(10, obj.packed_enum);
    if (obj.skip_message) pbf.writeBooleanField(6, obj.skip_message);
    if (obj.no_unions) pbf.writeBooleanField(8, obj.no_unions);
    if (obj.msgid) pbf.writeVarintField(9, obj.msgid);
    if (obj.anonymous_oneof) pbf.writeBooleanField(11, obj.anonymous_oneof);
    if (obj.proto3) pbf.writeBooleanField(12, obj.proto3);
    if (obj.enum_to_string) pbf.writeBooleanField(13, obj.enum_to_string);
    if (obj.fixed_length) pbf.writeBooleanField(15, obj.fixed_length);
};

// FileDescriptorSet ========================================

var FileDescriptorSet = exports.FileDescriptorSet = {};

FileDescriptorSet.read = function (pbf, end) {
    return pbf.readFields(FileDescriptorSet._readField, { file: [] }, end);
};
FileDescriptorSet._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.file.push(FileDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
};
FileDescriptorSet.write = function (obj, pbf) {
    if (obj.file) for (var i = 0; i < obj.file.length; i++) pbf.writeMessage(1, FileDescriptorProto.write, obj.file[i]);
};

// FileDescriptorProto ========================================

var FileDescriptorProto = exports.FileDescriptorProto = {};

FileDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(FileDescriptorProto._readField, { name: "", package: "", dependency: [], message_type: [], enum_type: [], service: [], extension: [], options: null, source_code_info: null }, end);
};
FileDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.package = pbf.readString();
    else if (tag === 3) obj.dependency.push(pbf.readString());
    else if (tag === 4) obj.message_type.push(DescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 5) obj.enum_type.push(EnumDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 6) obj.service.push(ServiceDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 7) obj.extension.push(FieldDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 8) obj.options = FileOptions.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 9) obj.source_code_info = SourceCodeInfo.read(pbf, pbf.readVarint() + pbf.pos);
};
FileDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.package) pbf.writeStringField(2, obj.package);
    if (obj.dependency) for (var i = 0; i < obj.dependency.length; i++) pbf.writeStringField(3, obj.dependency[i]);
    if (obj.message_type) for (i = 0; i < obj.message_type.length; i++) pbf.writeMessage(4, DescriptorProto.write, obj.message_type[i]);
    if (obj.enum_type) for (i = 0; i < obj.enum_type.length; i++) pbf.writeMessage(5, EnumDescriptorProto.write, obj.enum_type[i]);
    if (obj.service) for (i = 0; i < obj.service.length; i++) pbf.writeMessage(6, ServiceDescriptorProto.write, obj.service[i]);
    if (obj.extension) for (i = 0; i < obj.extension.length; i++) pbf.writeMessage(7, FieldDescriptorProto.write, obj.extension[i]);
    if (obj.options) pbf.writeMessage(8, FileOptions.write, obj.options);
    if (obj.source_code_info) pbf.writeMessage(9, SourceCodeInfo.write, obj.source_code_info);
};

// DescriptorProto ========================================

var DescriptorProto = exports.DescriptorProto = {};

DescriptorProto.read = function (pbf, end) {
    return pbf.readFields(DescriptorProto._readField, { name: "", field: [], extension: [], nested_type: [], enum_type: [], extension_range: [], options: null }, end);
};
DescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.field.push(FieldDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 6) obj.extension.push(FieldDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.nested_type.push(DescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 4) obj.enum_type.push(EnumDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 5) obj.extension_range.push(DescriptorProto.ExtensionRange.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 7) obj.options = MessageOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
DescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.field) for (var i = 0; i < obj.field.length; i++) pbf.writeMessage(2, FieldDescriptorProto.write, obj.field[i]);
    if (obj.extension) for (i = 0; i < obj.extension.length; i++) pbf.writeMessage(6, FieldDescriptorProto.write, obj.extension[i]);
    if (obj.nested_type) for (i = 0; i < obj.nested_type.length; i++) pbf.writeMessage(3, DescriptorProto.write, obj.nested_type[i]);
    if (obj.enum_type) for (i = 0; i < obj.enum_type.length; i++) pbf.writeMessage(4, EnumDescriptorProto.write, obj.enum_type[i]);
    if (obj.extension_range) for (i = 0; i < obj.extension_range.length; i++) pbf.writeMessage(5, DescriptorProto.ExtensionRange.write, obj.extension_range[i]);
    if (obj.options) pbf.writeMessage(7, MessageOptions.write, obj.options);
};

// DescriptorProto.ExtensionRange ========================================

DescriptorProto.ExtensionRange = {};

DescriptorProto.ExtensionRange.read = function (pbf, end) {
    return pbf.readFields(DescriptorProto.ExtensionRange._readField, { start: 0, end: 0 }, end);
};
DescriptorProto.ExtensionRange._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.start = pbf.readVarint(true);
    else if (tag === 2) obj.end = pbf.readVarint(true);
};
DescriptorProto.ExtensionRange.write = function (obj, pbf) {
    if (obj.start) pbf.writeVarintField(1, obj.start);
    if (obj.end) pbf.writeVarintField(2, obj.end);
};

// FieldDescriptorProto ========================================

var FieldDescriptorProto = exports.FieldDescriptorProto = {};

FieldDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(FieldDescriptorProto._readField, { name: "", number: 0, label: 0, type: 0, type_name: "", extendee: "", default_value: "", options: null }, end);
};
FieldDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 3) obj.number = pbf.readVarint(true);
    else if (tag === 4) obj.label = pbf.readVarint();
    else if (tag === 5) obj.type = pbf.readVarint();
    else if (tag === 6) obj.type_name = pbf.readString();
    else if (tag === 2) obj.extendee = pbf.readString();
    else if (tag === 7) obj.default_value = pbf.readString();
    else if (tag === 8) obj.options = FieldOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
FieldDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.number) pbf.writeVarintField(3, obj.number);
    if (obj.label) pbf.writeVarintField(4, obj.label);
    if (obj.type) pbf.writeVarintField(5, obj.type);
    if (obj.type_name) pbf.writeStringField(6, obj.type_name);
    if (obj.extendee) pbf.writeStringField(2, obj.extendee);
    if (obj.default_value) pbf.writeStringField(7, obj.default_value);
    if (obj.options) pbf.writeMessage(8, FieldOptions.write, obj.options);
};

FieldDescriptorProto.Type = {
    "TYPE_DOUBLE": {
        "value": 1,
        "options": {}
    },
    "TYPE_FLOAT": {
        "value": 2,
        "options": {}
    },
    "TYPE_INT64": {
        "value": 3,
        "options": {}
    },
    "TYPE_UINT64": {
        "value": 4,
        "options": {}
    },
    "TYPE_INT32": {
        "value": 5,
        "options": {}
    },
    "TYPE_FIXED64": {
        "value": 6,
        "options": {}
    },
    "TYPE_FIXED32": {
        "value": 7,
        "options": {}
    },
    "TYPE_BOOL": {
        "value": 8,
        "options": {}
    },
    "TYPE_STRING": {
        "value": 9,
        "options": {}
    },
    "TYPE_GROUP": {
        "value": 10,
        "options": {}
    },
    "TYPE_MESSAGE": {
        "value": 11,
        "options": {}
    },
    "TYPE_BYTES": {
        "value": 12,
        "options": {}
    },
    "TYPE_UINT32": {
        "value": 13,
        "options": {}
    },
    "TYPE_ENUM": {
        "value": 14,
        "options": {}
    },
    "TYPE_SFIXED32": {
        "value": 15,
        "options": {}
    },
    "TYPE_SFIXED64": {
        "value": 16,
        "options": {}
    },
    "TYPE_SINT32": {
        "value": 17,
        "options": {}
    },
    "TYPE_SINT64": {
        "value": 18,
        "options": {}
    }
};

FieldDescriptorProto.Label = {
    "LABEL_OPTIONAL": {
        "value": 1,
        "options": {}
    },
    "LABEL_REQUIRED": {
        "value": 2,
        "options": {}
    },
    "LABEL_REPEATED": {
        "value": 3,
        "options": {}
    }
};

// EnumDescriptorProto ========================================

var EnumDescriptorProto = exports.EnumDescriptorProto = {};

EnumDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(EnumDescriptorProto._readField, { name: "", value: [], options: null }, end);
};
EnumDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.value.push(EnumValueDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.options = EnumOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
EnumDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.value) for (var i = 0; i < obj.value.length; i++) pbf.writeMessage(2, EnumValueDescriptorProto.write, obj.value[i]);
    if (obj.options) pbf.writeMessage(3, EnumOptions.write, obj.options);
};

// EnumValueDescriptorProto ========================================

var EnumValueDescriptorProto = exports.EnumValueDescriptorProto = {};

EnumValueDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(EnumValueDescriptorProto._readField, { name: "", number: 0, options: null }, end);
};
EnumValueDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.number = pbf.readVarint(true);
    else if (tag === 3) obj.options = EnumValueOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
EnumValueDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.number) pbf.writeVarintField(2, obj.number);
    if (obj.options) pbf.writeMessage(3, EnumValueOptions.write, obj.options);
};

// ServiceDescriptorProto ========================================

var ServiceDescriptorProto = exports.ServiceDescriptorProto = {};

ServiceDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(ServiceDescriptorProto._readField, { name: "", method: [], options: null }, end);
};
ServiceDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.method.push(MethodDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.options = ServiceOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
ServiceDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.method) for (var i = 0; i < obj.method.length; i++) pbf.writeMessage(2, MethodDescriptorProto.write, obj.method[i]);
    if (obj.options) pbf.writeMessage(3, ServiceOptions.write, obj.options);
};

// MethodDescriptorProto ========================================

var MethodDescriptorProto = exports.MethodDescriptorProto = {};

MethodDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(MethodDescriptorProto._readField, { name: "", input_type: "", output_type: "", options: null }, end);
};
MethodDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.input_type = pbf.readString();
    else if (tag === 3) obj.output_type = pbf.readString();
    else if (tag === 4) obj.options = MethodOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
MethodDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.input_type) pbf.writeStringField(2, obj.input_type);
    if (obj.output_type) pbf.writeStringField(3, obj.output_type);
    if (obj.options) pbf.writeMessage(4, MethodOptions.write, obj.options);
};

// FileOptions ========================================

var FileOptions = exports.FileOptions = {};

FileOptions.read = function (pbf, end) {
    return pbf.readFields(FileOptions._readField, { java_package: "", java_outer_classname: "", java_multiple_files: false, java_generate_equals_and_hash: false, optimize_for: { "value": 1, "options": {} }, cc_generic_services: false, java_generic_services: false, py_generic_services: false, uninterpreted_option: [] }, end);
};
FileOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.java_package = pbf.readString();
    else if (tag === 8) obj.java_outer_classname = pbf.readString();
    else if (tag === 10) obj.java_multiple_files = pbf.readBoolean();
    else if (tag === 20) obj.java_generate_equals_and_hash = pbf.readBoolean();
    else if (tag === 9) obj.optimize_for = pbf.readVarint();
    else if (tag === 16) obj.cc_generic_services = pbf.readBoolean();
    else if (tag === 17) obj.java_generic_services = pbf.readBoolean();
    else if (tag === 18) obj.py_generic_services = pbf.readBoolean();
    else if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
FileOptions.write = function (obj, pbf) {
    if (obj.java_package) pbf.writeStringField(1, obj.java_package);
    if (obj.java_outer_classname) pbf.writeStringField(8, obj.java_outer_classname);
    if (obj.java_multiple_files) pbf.writeBooleanField(10, obj.java_multiple_files);
    if (obj.java_generate_equals_and_hash) pbf.writeBooleanField(20, obj.java_generate_equals_and_hash);
    if (obj.optimize_for != undefined && obj.optimize_for !== { "value": 1, "options": {} }) pbf.writeVarintField(9, obj.optimize_for);
    if (obj.cc_generic_services) pbf.writeBooleanField(16, obj.cc_generic_services);
    if (obj.java_generic_services) pbf.writeBooleanField(17, obj.java_generic_services);
    if (obj.py_generic_services) pbf.writeBooleanField(18, obj.py_generic_services);
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

FileOptions.OptimizeMode = {
    "SPEED": {
        "value": 1,
        "options": {}
    },
    "CODE_SIZE": {
        "value": 2,
        "options": {}
    },
    "LITE_RUNTIME": {
        "value": 3,
        "options": {}
    }
};

// MessageOptions ========================================

var MessageOptions = exports.MessageOptions = {};

MessageOptions.read = function (pbf, end) {
    return pbf.readFields(MessageOptions._readField, { message_set_wire_format: false, no_standard_descriptor_accessor: false, uninterpreted_option: [] }, end);
};
MessageOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message_set_wire_format = pbf.readBoolean();
    else if (tag === 2) obj.no_standard_descriptor_accessor = pbf.readBoolean();
    else if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
MessageOptions.write = function (obj, pbf) {
    if (obj.message_set_wire_format) pbf.writeBooleanField(1, obj.message_set_wire_format);
    if (obj.no_standard_descriptor_accessor) pbf.writeBooleanField(2, obj.no_standard_descriptor_accessor);
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// FieldOptions ========================================

var FieldOptions = exports.FieldOptions = {};

FieldOptions.read = function (pbf, end) {
    return pbf.readFields(FieldOptions._readField, { ctype: { "value": 0, "options": {} }, packed: false, deprecated: false, experimental_map_key: "", uninterpreted_option: [] }, end);
};
FieldOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.ctype = pbf.readVarint();
    else if (tag === 2) obj.packed = pbf.readBoolean();
    else if (tag === 3) obj.deprecated = pbf.readBoolean();
    else if (tag === 9) obj.experimental_map_key = pbf.readString();
    else if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
FieldOptions.write = function (obj, pbf) {
    if (obj.ctype != undefined && obj.ctype !== { "value": 0, "options": {} }) pbf.writeVarintField(1, obj.ctype);
    if (obj.packed) pbf.writeBooleanField(2, obj.packed);
    if (obj.deprecated) pbf.writeBooleanField(3, obj.deprecated);
    if (obj.experimental_map_key) pbf.writeStringField(9, obj.experimental_map_key);
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

FieldOptions.CType = {
    "STRING": {
        "value": 0,
        "options": {}
    },
    "CORD": {
        "value": 1,
        "options": {}
    },
    "STRING_PIECE": {
        "value": 2,
        "options": {}
    }
};

// EnumOptions ========================================

var EnumOptions = exports.EnumOptions = {};

EnumOptions.read = function (pbf, end) {
    return pbf.readFields(EnumOptions._readField, { uninterpreted_option: [] }, end);
};
EnumOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
EnumOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// EnumValueOptions ========================================

var EnumValueOptions = exports.EnumValueOptions = {};

EnumValueOptions.read = function (pbf, end) {
    return pbf.readFields(EnumValueOptions._readField, { uninterpreted_option: [] }, end);
};
EnumValueOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
EnumValueOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// ServiceOptions ========================================

var ServiceOptions = exports.ServiceOptions = {};

ServiceOptions.read = function (pbf, end) {
    return pbf.readFields(ServiceOptions._readField, { uninterpreted_option: [] }, end);
};
ServiceOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
ServiceOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// MethodOptions ========================================

var MethodOptions = exports.MethodOptions = {};

MethodOptions.read = function (pbf, end) {
    return pbf.readFields(MethodOptions._readField, { uninterpreted_option: [] }, end);
};
MethodOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
MethodOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// UninterpretedOption ========================================

var UninterpretedOption = exports.UninterpretedOption = {};

UninterpretedOption.read = function (pbf, end) {
    return pbf.readFields(UninterpretedOption._readField, { name: [], identifier_value: "", positive_int_value: 0, negative_int_value: 0, double_value: 0, string_value: null, aggregate_value: "" }, end);
};
UninterpretedOption._readField = function (tag, obj, pbf) {
    if (tag === 2) obj.name.push(UninterpretedOption.NamePart.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.identifier_value = pbf.readString();
    else if (tag === 4) obj.positive_int_value = pbf.readVarint();
    else if (tag === 5) obj.negative_int_value = pbf.readVarint(true);
    else if (tag === 6) obj.double_value = pbf.readDouble();
    else if (tag === 7) obj.string_value = pbf.readBytes();
    else if (tag === 8) obj.aggregate_value = pbf.readString();
};
UninterpretedOption.write = function (obj, pbf) {
    if (obj.name) for (var i = 0; i < obj.name.length; i++) pbf.writeMessage(2, UninterpretedOption.NamePart.write, obj.name[i]);
    if (obj.identifier_value) pbf.writeStringField(3, obj.identifier_value);
    if (obj.positive_int_value) pbf.writeVarintField(4, obj.positive_int_value);
    if (obj.negative_int_value) pbf.writeVarintField(5, obj.negative_int_value);
    if (obj.double_value) pbf.writeDoubleField(6, obj.double_value);
    if (obj.string_value) pbf.writeBytesField(7, obj.string_value);
    if (obj.aggregate_value) pbf.writeStringField(8, obj.aggregate_value);
};

// UninterpretedOption.NamePart ========================================

UninterpretedOption.NamePart = {};

UninterpretedOption.NamePart.read = function (pbf, end) {
    return pbf.readFields(UninterpretedOption.NamePart._readField, { name_part: "", is_extension: false }, end);
};
UninterpretedOption.NamePart._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name_part = pbf.readString();
    else if (tag === 2) obj.is_extension = pbf.readBoolean();
};
UninterpretedOption.NamePart.write = function (obj, pbf) {
    if (obj.name_part) pbf.writeStringField(1, obj.name_part);
    if (obj.is_extension) pbf.writeBooleanField(2, obj.is_extension);
};

// SourceCodeInfo ========================================

var SourceCodeInfo = exports.SourceCodeInfo = {};

SourceCodeInfo.read = function (pbf, end) {
    return pbf.readFields(SourceCodeInfo._readField, { location: [] }, end);
};
SourceCodeInfo._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.location.push(SourceCodeInfo.Location.read(pbf, pbf.readVarint() + pbf.pos));
};
SourceCodeInfo.write = function (obj, pbf) {
    if (obj.location) for (var i = 0; i < obj.location.length; i++) pbf.writeMessage(1, SourceCodeInfo.Location.write, obj.location[i]);
};

// SourceCodeInfo.Location ========================================

SourceCodeInfo.Location = {};

SourceCodeInfo.Location.read = function (pbf, end) {
    return pbf.readFields(SourceCodeInfo.Location._readField, { path: [], span: [] }, end);
};
SourceCodeInfo.Location._readField = function (tag, obj, pbf) {
    if (tag === 1) pbf.readPackedVarint(obj.path, true);
    else if (tag === 2) pbf.readPackedVarint(obj.span, true);
};
SourceCodeInfo.Location.write = function (obj, pbf) {
    if (obj.path) pbf.writePackedVarint(1, obj.path);
    if (obj.span) pbf.writePackedVarint(2, obj.span);
};

// SendPacketReq ========================================

var SendPacketReq = exports.SendPacketReq = {};

SendPacketReq.read = function (pbf, end) {
    return pbf.readFields(SendPacketReq._readField, { header: null, destination_address: 0, source_endpoint: 0, destination_endpoint: 0, qos: 0, payload: null, initial_delay_ms: 0, is_unack_csma_ca: false, hop_limit: 0 }, end);
};
SendPacketReq._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.header = RequestHeader.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.destination_address = pbf.readVarint();
    else if (tag === 3) obj.source_endpoint = pbf.readVarint();
    else if (tag === 4) obj.destination_endpoint = pbf.readVarint();
    else if (tag === 5) obj.qos = pbf.readVarint();
    else if (tag === 6) obj.payload = pbf.readBytes();
    else if (tag === 7) obj.initial_delay_ms = pbf.readVarint();
    else if (tag === 8) obj.is_unack_csma_ca = pbf.readBoolean();
    else if (tag === 9) obj.hop_limit = pbf.readVarint();
};
SendPacketReq.write = function (obj, pbf) {
    if (obj.header) pbf.writeMessage(1, RequestHeader.write, obj.header);
    if (obj.destination_address) pbf.writeVarintField(2, obj.destination_address);
    if (obj.source_endpoint) pbf.writeVarintField(3, obj.source_endpoint);
    if (obj.destination_endpoint) pbf.writeVarintField(4, obj.destination_endpoint);
    if (obj.qos) pbf.writeVarintField(5, obj.qos);
    if (obj.payload) pbf.writeBytesField(6, obj.payload);
    if (obj.initial_delay_ms) pbf.writeVarintField(7, obj.initial_delay_ms);
    if (obj.is_unack_csma_ca) pbf.writeBooleanField(8, obj.is_unack_csma_ca);
    if (obj.hop_limit) pbf.writeVarintField(9, obj.hop_limit);
};

// SendPacketResp ========================================

var SendPacketResp = exports.SendPacketResp = {};

SendPacketResp.read = function (pbf, end) {
    return pbf.readFields(SendPacketResp._readField, { header: null }, end);
};
SendPacketResp._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.header = ResponseHeader.read(pbf, pbf.readVarint() + pbf.pos);
};
SendPacketResp.write = function (obj, pbf) {
    if (obj.header) pbf.writeMessage(1, ResponseHeader.write, obj.header);
};

// PacketReceivedEvent ========================================

var PacketReceivedEvent = exports.PacketReceivedEvent = {};

PacketReceivedEvent.read = function (pbf, end) {
    return pbf.readFields(PacketReceivedEvent._readField, { header: null, source_address: 0, destination_address: 0, source_endpoint: 0, destination_endpoint: 0, travel_time_ms: 0, rx_time_ms_epoch: 0, qos: 0, payload: null, payload_size: 0, hop_count: 0 }, end);
};
PacketReceivedEvent._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.header = EventHeader.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.source_address = pbf.readVarint();
    else if (tag === 3) obj.destination_address = pbf.readVarint();
    else if (tag === 4) obj.source_endpoint = pbf.readVarint();
    else if (tag === 5) obj.destination_endpoint = pbf.readVarint();
    else if (tag === 6) obj.travel_time_ms = pbf.readVarint();
    else if (tag === 7) obj.rx_time_ms_epoch = pbf.readVarint();
    else if (tag === 8) obj.qos = pbf.readVarint();
    else if (tag === 9) obj.payload = pbf.readBytes();
    else if (tag === 10) obj.payload_size = pbf.readVarint();
    else if (tag === 11) obj.hop_count = pbf.readVarint();
};
PacketReceivedEvent.write = function (obj, pbf) {
    if (obj.header) pbf.writeMessage(1, EventHeader.write, obj.header);
    if (obj.source_address) pbf.writeVarintField(2, obj.source_address);
    if (obj.destination_address) pbf.writeVarintField(3, obj.destination_address);
    if (obj.source_endpoint) pbf.writeVarintField(4, obj.source_endpoint);
    if (obj.destination_endpoint) pbf.writeVarintField(5, obj.destination_endpoint);
    if (obj.travel_time_ms) pbf.writeVarintField(6, obj.travel_time_ms);
    if (obj.rx_time_ms_epoch) pbf.writeVarintField(7, obj.rx_time_ms_epoch);
    if (obj.qos) pbf.writeVarintField(8, obj.qos);
    if (obj.payload) pbf.writeBytesField(9, obj.payload);
    if (obj.payload_size) pbf.writeVarintField(10, obj.payload_size);
    if (obj.hop_count) pbf.writeVarintField(11, obj.hop_count);
};

// RequestHeader ========================================

var RequestHeader = exports.RequestHeader = {};

RequestHeader.read = function (pbf, end) {
    return pbf.readFields(RequestHeader._readField, { req_id: 0, sink_id: "" }, end);
};
RequestHeader._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.req_id = pbf.readVarint();
    else if (tag === 2) obj.sink_id = pbf.readString();
};
RequestHeader.write = function (obj, pbf) {
    if (obj.req_id) pbf.writeVarintField(1, obj.req_id);
    if (obj.sink_id) pbf.writeStringField(2, obj.sink_id);
};

// ResponseHeader ========================================

var ResponseHeader = exports.ResponseHeader = {};

ResponseHeader.read = function (pbf, end) {
    return pbf.readFields(ResponseHeader._readField, { req_id: 0, gw_id: "", sink_id: "", res: 0 }, end);
};
ResponseHeader._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.req_id = pbf.readVarint();
    else if (tag === 2) obj.gw_id = pbf.readString();
    else if (tag === 3) obj.sink_id = pbf.readString();
    else if (tag === 4) obj.res = pbf.readVarint();
};
ResponseHeader.write = function (obj, pbf) {
    if (obj.req_id) pbf.writeVarintField(1, obj.req_id);
    if (obj.gw_id) pbf.writeStringField(2, obj.gw_id);
    if (obj.sink_id) pbf.writeStringField(3, obj.sink_id);
    if (obj.res) pbf.writeVarintField(4, obj.res);
};

// EventHeader ========================================

var EventHeader = exports.EventHeader = {};

EventHeader.read = function (pbf, end) {
    return pbf.readFields(EventHeader._readField, { gw_id: "", sink_id: "", event_id: 0 }, end);
};
EventHeader._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.gw_id = pbf.readString();
    else if (tag === 2) obj.sink_id = pbf.readString();
    else if (tag === 3) obj.event_id = pbf.readVarint();
};
EventHeader.write = function (obj, pbf) {
    if (obj.gw_id) pbf.writeStringField(1, obj.gw_id);
    if (obj.sink_id) pbf.writeStringField(2, obj.sink_id);
    if (obj.event_id) pbf.writeVarintField(3, obj.event_id);
};

// FirmwareVersion ========================================

var FirmwareVersion = exports.FirmwareVersion = {};

FirmwareVersion.read = function (pbf, end) {
    return pbf.readFields(FirmwareVersion._readField, { major: 0, minor: 0, maint: 0, dev: 0 }, end);
};
FirmwareVersion._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.major = pbf.readVarint();
    else if (tag === 2) obj.minor = pbf.readVarint();
    else if (tag === 3) obj.maint = pbf.readVarint();
    else if (tag === 4) obj.dev = pbf.readVarint();
};
FirmwareVersion.write = function (obj, pbf) {
    if (obj.major) pbf.writeVarintField(1, obj.major);
    if (obj.minor) pbf.writeVarintField(2, obj.minor);
    if (obj.maint) pbf.writeVarintField(3, obj.maint);
    if (obj.dev) pbf.writeVarintField(4, obj.dev);
};

// NanoPBOptions ========================================

var NanoPBOptions = exports.NanoPBOptions = {};

NanoPBOptions.read = function (pbf, end) {
    return pbf.readFields(NanoPBOptions._readField, { max_size: 0, max_length: 0, max_count: 0, int_size: { "value": 0, "options": {} }, type: { "value": 0, "options": {} }, long_names: true, packed_struct: false, packed_enum: false, skip_message: false, no_unions: false, msgid: 0, anonymous_oneof: false, proto3: false, enum_to_string: false, fixed_length: false }, end);
};
NanoPBOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.max_size = pbf.readVarint(true);
    else if (tag === 14) obj.max_length = pbf.readVarint(true);
    else if (tag === 2) obj.max_count = pbf.readVarint(true);
    else if (tag === 7) obj.int_size = pbf.readVarint();
    else if (tag === 3) obj.type = pbf.readVarint();
    else if (tag === 4) obj.long_names = pbf.readBoolean();
    else if (tag === 5) obj.packed_struct = pbf.readBoolean();
    else if (tag === 10) obj.packed_enum = pbf.readBoolean();
    else if (tag === 6) obj.skip_message = pbf.readBoolean();
    else if (tag === 8) obj.no_unions = pbf.readBoolean();
    else if (tag === 9) obj.msgid = pbf.readVarint();
    else if (tag === 11) obj.anonymous_oneof = pbf.readBoolean();
    else if (tag === 12) obj.proto3 = pbf.readBoolean();
    else if (tag === 13) obj.enum_to_string = pbf.readBoolean();
    else if (tag === 15) obj.fixed_length = pbf.readBoolean();
};
NanoPBOptions.write = function (obj, pbf) {
    if (obj.max_size) pbf.writeVarintField(1, obj.max_size);
    if (obj.max_length) pbf.writeVarintField(14, obj.max_length);
    if (obj.max_count) pbf.writeVarintField(2, obj.max_count);
    if (obj.int_size != undefined && obj.int_size !== { "value": 0, "options": {} }) pbf.writeVarintField(7, obj.int_size);
    if (obj.type != undefined && obj.type !== { "value": 0, "options": {} }) pbf.writeVarintField(3, obj.type);
    if (obj.long_names != undefined && obj.long_names !== true) pbf.writeBooleanField(4, obj.long_names);
    if (obj.packed_struct) pbf.writeBooleanField(5, obj.packed_struct);
    if (obj.packed_enum) pbf.writeBooleanField(10, obj.packed_enum);
    if (obj.skip_message) pbf.writeBooleanField(6, obj.skip_message);
    if (obj.no_unions) pbf.writeBooleanField(8, obj.no_unions);
    if (obj.msgid) pbf.writeVarintField(9, obj.msgid);
    if (obj.anonymous_oneof) pbf.writeBooleanField(11, obj.anonymous_oneof);
    if (obj.proto3) pbf.writeBooleanField(12, obj.proto3);
    if (obj.enum_to_string) pbf.writeBooleanField(13, obj.enum_to_string);
    if (obj.fixed_length) pbf.writeBooleanField(15, obj.fixed_length);
};

// FileDescriptorSet ========================================

var FileDescriptorSet = exports.FileDescriptorSet = {};

FileDescriptorSet.read = function (pbf, end) {
    return pbf.readFields(FileDescriptorSet._readField, { file: [] }, end);
};
FileDescriptorSet._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.file.push(FileDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
};
FileDescriptorSet.write = function (obj, pbf) {
    if (obj.file) for (var i = 0; i < obj.file.length; i++) pbf.writeMessage(1, FileDescriptorProto.write, obj.file[i]);
};

// FileDescriptorProto ========================================

var FileDescriptorProto = exports.FileDescriptorProto = {};

FileDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(FileDescriptorProto._readField, { name: "", package: "", dependency: [], message_type: [], enum_type: [], service: [], extension: [], options: null, source_code_info: null }, end);
};
FileDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.package = pbf.readString();
    else if (tag === 3) obj.dependency.push(pbf.readString());
    else if (tag === 4) obj.message_type.push(DescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 5) obj.enum_type.push(EnumDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 6) obj.service.push(ServiceDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 7) obj.extension.push(FieldDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 8) obj.options = FileOptions.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 9) obj.source_code_info = SourceCodeInfo.read(pbf, pbf.readVarint() + pbf.pos);
};
FileDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.package) pbf.writeStringField(2, obj.package);
    if (obj.dependency) for (var i = 0; i < obj.dependency.length; i++) pbf.writeStringField(3, obj.dependency[i]);
    if (obj.message_type) for (i = 0; i < obj.message_type.length; i++) pbf.writeMessage(4, DescriptorProto.write, obj.message_type[i]);
    if (obj.enum_type) for (i = 0; i < obj.enum_type.length; i++) pbf.writeMessage(5, EnumDescriptorProto.write, obj.enum_type[i]);
    if (obj.service) for (i = 0; i < obj.service.length; i++) pbf.writeMessage(6, ServiceDescriptorProto.write, obj.service[i]);
    if (obj.extension) for (i = 0; i < obj.extension.length; i++) pbf.writeMessage(7, FieldDescriptorProto.write, obj.extension[i]);
    if (obj.options) pbf.writeMessage(8, FileOptions.write, obj.options);
    if (obj.source_code_info) pbf.writeMessage(9, SourceCodeInfo.write, obj.source_code_info);
};

// DescriptorProto ========================================

var DescriptorProto = exports.DescriptorProto = {};

DescriptorProto.read = function (pbf, end) {
    return pbf.readFields(DescriptorProto._readField, { name: "", field: [], extension: [], nested_type: [], enum_type: [], extension_range: [], options: null }, end);
};
DescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.field.push(FieldDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 6) obj.extension.push(FieldDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.nested_type.push(DescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 4) obj.enum_type.push(EnumDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 5) obj.extension_range.push(DescriptorProto.ExtensionRange.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 7) obj.options = MessageOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
DescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.field) for (var i = 0; i < obj.field.length; i++) pbf.writeMessage(2, FieldDescriptorProto.write, obj.field[i]);
    if (obj.extension) for (i = 0; i < obj.extension.length; i++) pbf.writeMessage(6, FieldDescriptorProto.write, obj.extension[i]);
    if (obj.nested_type) for (i = 0; i < obj.nested_type.length; i++) pbf.writeMessage(3, DescriptorProto.write, obj.nested_type[i]);
    if (obj.enum_type) for (i = 0; i < obj.enum_type.length; i++) pbf.writeMessage(4, EnumDescriptorProto.write, obj.enum_type[i]);
    if (obj.extension_range) for (i = 0; i < obj.extension_range.length; i++) pbf.writeMessage(5, DescriptorProto.ExtensionRange.write, obj.extension_range[i]);
    if (obj.options) pbf.writeMessage(7, MessageOptions.write, obj.options);
};

// DescriptorProto.ExtensionRange ========================================

DescriptorProto.ExtensionRange = {};

DescriptorProto.ExtensionRange.read = function (pbf, end) {
    return pbf.readFields(DescriptorProto.ExtensionRange._readField, { start: 0, end: 0 }, end);
};
DescriptorProto.ExtensionRange._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.start = pbf.readVarint(true);
    else if (tag === 2) obj.end = pbf.readVarint(true);
};
DescriptorProto.ExtensionRange.write = function (obj, pbf) {
    if (obj.start) pbf.writeVarintField(1, obj.start);
    if (obj.end) pbf.writeVarintField(2, obj.end);
};

// FieldDescriptorProto ========================================

var FieldDescriptorProto = exports.FieldDescriptorProto = {};

FieldDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(FieldDescriptorProto._readField, { name: "", number: 0, label: 0, type: 0, type_name: "", extendee: "", default_value: "", options: null }, end);
};
FieldDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 3) obj.number = pbf.readVarint(true);
    else if (tag === 4) obj.label = pbf.readVarint();
    else if (tag === 5) obj.type = pbf.readVarint();
    else if (tag === 6) obj.type_name = pbf.readString();
    else if (tag === 2) obj.extendee = pbf.readString();
    else if (tag === 7) obj.default_value = pbf.readString();
    else if (tag === 8) obj.options = FieldOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
FieldDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.number) pbf.writeVarintField(3, obj.number);
    if (obj.label) pbf.writeVarintField(4, obj.label);
    if (obj.type) pbf.writeVarintField(5, obj.type);
    if (obj.type_name) pbf.writeStringField(6, obj.type_name);
    if (obj.extendee) pbf.writeStringField(2, obj.extendee);
    if (obj.default_value) pbf.writeStringField(7, obj.default_value);
    if (obj.options) pbf.writeMessage(8, FieldOptions.write, obj.options);
};

FieldDescriptorProto.Type = {
    "TYPE_DOUBLE": {
        "value": 1,
        "options": {}
    },
    "TYPE_FLOAT": {
        "value": 2,
        "options": {}
    },
    "TYPE_INT64": {
        "value": 3,
        "options": {}
    },
    "TYPE_UINT64": {
        "value": 4,
        "options": {}
    },
    "TYPE_INT32": {
        "value": 5,
        "options": {}
    },
    "TYPE_FIXED64": {
        "value": 6,
        "options": {}
    },
    "TYPE_FIXED32": {
        "value": 7,
        "options": {}
    },
    "TYPE_BOOL": {
        "value": 8,
        "options": {}
    },
    "TYPE_STRING": {
        "value": 9,
        "options": {}
    },
    "TYPE_GROUP": {
        "value": 10,
        "options": {}
    },
    "TYPE_MESSAGE": {
        "value": 11,
        "options": {}
    },
    "TYPE_BYTES": {
        "value": 12,
        "options": {}
    },
    "TYPE_UINT32": {
        "value": 13,
        "options": {}
    },
    "TYPE_ENUM": {
        "value": 14,
        "options": {}
    },
    "TYPE_SFIXED32": {
        "value": 15,
        "options": {}
    },
    "TYPE_SFIXED64": {
        "value": 16,
        "options": {}
    },
    "TYPE_SINT32": {
        "value": 17,
        "options": {}
    },
    "TYPE_SINT64": {
        "value": 18,
        "options": {}
    }
};

FieldDescriptorProto.Label = {
    "LABEL_OPTIONAL": {
        "value": 1,
        "options": {}
    },
    "LABEL_REQUIRED": {
        "value": 2,
        "options": {}
    },
    "LABEL_REPEATED": {
        "value": 3,
        "options": {}
    }
};

// EnumDescriptorProto ========================================

var EnumDescriptorProto = exports.EnumDescriptorProto = {};

EnumDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(EnumDescriptorProto._readField, { name: "", value: [], options: null }, end);
};
EnumDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.value.push(EnumValueDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.options = EnumOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
EnumDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.value) for (var i = 0; i < obj.value.length; i++) pbf.writeMessage(2, EnumValueDescriptorProto.write, obj.value[i]);
    if (obj.options) pbf.writeMessage(3, EnumOptions.write, obj.options);
};

// EnumValueDescriptorProto ========================================

var EnumValueDescriptorProto = exports.EnumValueDescriptorProto = {};

EnumValueDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(EnumValueDescriptorProto._readField, { name: "", number: 0, options: null }, end);
};
EnumValueDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.number = pbf.readVarint(true);
    else if (tag === 3) obj.options = EnumValueOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
EnumValueDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.number) pbf.writeVarintField(2, obj.number);
    if (obj.options) pbf.writeMessage(3, EnumValueOptions.write, obj.options);
};

// ServiceDescriptorProto ========================================

var ServiceDescriptorProto = exports.ServiceDescriptorProto = {};

ServiceDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(ServiceDescriptorProto._readField, { name: "", method: [], options: null }, end);
};
ServiceDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.method.push(MethodDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.options = ServiceOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
ServiceDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.method) for (var i = 0; i < obj.method.length; i++) pbf.writeMessage(2, MethodDescriptorProto.write, obj.method[i]);
    if (obj.options) pbf.writeMessage(3, ServiceOptions.write, obj.options);
};

// MethodDescriptorProto ========================================

var MethodDescriptorProto = exports.MethodDescriptorProto = {};

MethodDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(MethodDescriptorProto._readField, { name: "", input_type: "", output_type: "", options: null }, end);
};
MethodDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.input_type = pbf.readString();
    else if (tag === 3) obj.output_type = pbf.readString();
    else if (tag === 4) obj.options = MethodOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
MethodDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.input_type) pbf.writeStringField(2, obj.input_type);
    if (obj.output_type) pbf.writeStringField(3, obj.output_type);
    if (obj.options) pbf.writeMessage(4, MethodOptions.write, obj.options);
};

// FileOptions ========================================

var FileOptions = exports.FileOptions = {};

FileOptions.read = function (pbf, end) {
    return pbf.readFields(FileOptions._readField, { java_package: "", java_outer_classname: "", java_multiple_files: false, java_generate_equals_and_hash: false, optimize_for: { "value": 1, "options": {} }, cc_generic_services: false, java_generic_services: false, py_generic_services: false, uninterpreted_option: [] }, end);
};
FileOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.java_package = pbf.readString();
    else if (tag === 8) obj.java_outer_classname = pbf.readString();
    else if (tag === 10) obj.java_multiple_files = pbf.readBoolean();
    else if (tag === 20) obj.java_generate_equals_and_hash = pbf.readBoolean();
    else if (tag === 9) obj.optimize_for = pbf.readVarint();
    else if (tag === 16) obj.cc_generic_services = pbf.readBoolean();
    else if (tag === 17) obj.java_generic_services = pbf.readBoolean();
    else if (tag === 18) obj.py_generic_services = pbf.readBoolean();
    else if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
FileOptions.write = function (obj, pbf) {
    if (obj.java_package) pbf.writeStringField(1, obj.java_package);
    if (obj.java_outer_classname) pbf.writeStringField(8, obj.java_outer_classname);
    if (obj.java_multiple_files) pbf.writeBooleanField(10, obj.java_multiple_files);
    if (obj.java_generate_equals_and_hash) pbf.writeBooleanField(20, obj.java_generate_equals_and_hash);
    if (obj.optimize_for != undefined && obj.optimize_for !== { "value": 1, "options": {} }) pbf.writeVarintField(9, obj.optimize_for);
    if (obj.cc_generic_services) pbf.writeBooleanField(16, obj.cc_generic_services);
    if (obj.java_generic_services) pbf.writeBooleanField(17, obj.java_generic_services);
    if (obj.py_generic_services) pbf.writeBooleanField(18, obj.py_generic_services);
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

FileOptions.OptimizeMode = {
    "SPEED": {
        "value": 1,
        "options": {}
    },
    "CODE_SIZE": {
        "value": 2,
        "options": {}
    },
    "LITE_RUNTIME": {
        "value": 3,
        "options": {}
    }
};

// MessageOptions ========================================

var MessageOptions = exports.MessageOptions = {};

MessageOptions.read = function (pbf, end) {
    return pbf.readFields(MessageOptions._readField, { message_set_wire_format: false, no_standard_descriptor_accessor: false, uninterpreted_option: [] }, end);
};
MessageOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message_set_wire_format = pbf.readBoolean();
    else if (tag === 2) obj.no_standard_descriptor_accessor = pbf.readBoolean();
    else if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
MessageOptions.write = function (obj, pbf) {
    if (obj.message_set_wire_format) pbf.writeBooleanField(1, obj.message_set_wire_format);
    if (obj.no_standard_descriptor_accessor) pbf.writeBooleanField(2, obj.no_standard_descriptor_accessor);
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// FieldOptions ========================================

var FieldOptions = exports.FieldOptions = {};

FieldOptions.read = function (pbf, end) {
    return pbf.readFields(FieldOptions._readField, { ctype: { "value": 0, "options": {} }, packed: false, deprecated: false, experimental_map_key: "", uninterpreted_option: [] }, end);
};
FieldOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.ctype = pbf.readVarint();
    else if (tag === 2) obj.packed = pbf.readBoolean();
    else if (tag === 3) obj.deprecated = pbf.readBoolean();
    else if (tag === 9) obj.experimental_map_key = pbf.readString();
    else if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
FieldOptions.write = function (obj, pbf) {
    if (obj.ctype != undefined && obj.ctype !== { "value": 0, "options": {} }) pbf.writeVarintField(1, obj.ctype);
    if (obj.packed) pbf.writeBooleanField(2, obj.packed);
    if (obj.deprecated) pbf.writeBooleanField(3, obj.deprecated);
    if (obj.experimental_map_key) pbf.writeStringField(9, obj.experimental_map_key);
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

FieldOptions.CType = {
    "STRING": {
        "value": 0,
        "options": {}
    },
    "CORD": {
        "value": 1,
        "options": {}
    },
    "STRING_PIECE": {
        "value": 2,
        "options": {}
    }
};

// EnumOptions ========================================

var EnumOptions = exports.EnumOptions = {};

EnumOptions.read = function (pbf, end) {
    return pbf.readFields(EnumOptions._readField, { uninterpreted_option: [] }, end);
};
EnumOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
EnumOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// EnumValueOptions ========================================

var EnumValueOptions = exports.EnumValueOptions = {};

EnumValueOptions.read = function (pbf, end) {
    return pbf.readFields(EnumValueOptions._readField, { uninterpreted_option: [] }, end);
};
EnumValueOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
EnumValueOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// ServiceOptions ========================================

var ServiceOptions = exports.ServiceOptions = {};

ServiceOptions.read = function (pbf, end) {
    return pbf.readFields(ServiceOptions._readField, { uninterpreted_option: [] }, end);
};
ServiceOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
ServiceOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// MethodOptions ========================================

var MethodOptions = exports.MethodOptions = {};

MethodOptions.read = function (pbf, end) {
    return pbf.readFields(MethodOptions._readField, { uninterpreted_option: [] }, end);
};
MethodOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
MethodOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// UninterpretedOption ========================================

var UninterpretedOption = exports.UninterpretedOption = {};

UninterpretedOption.read = function (pbf, end) {
    return pbf.readFields(UninterpretedOption._readField, { name: [], identifier_value: "", positive_int_value: 0, negative_int_value: 0, double_value: 0, string_value: null, aggregate_value: "" }, end);
};
UninterpretedOption._readField = function (tag, obj, pbf) {
    if (tag === 2) obj.name.push(UninterpretedOption.NamePart.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.identifier_value = pbf.readString();
    else if (tag === 4) obj.positive_int_value = pbf.readVarint();
    else if (tag === 5) obj.negative_int_value = pbf.readVarint(true);
    else if (tag === 6) obj.double_value = pbf.readDouble();
    else if (tag === 7) obj.string_value = pbf.readBytes();
    else if (tag === 8) obj.aggregate_value = pbf.readString();
};
UninterpretedOption.write = function (obj, pbf) {
    if (obj.name) for (var i = 0; i < obj.name.length; i++) pbf.writeMessage(2, UninterpretedOption.NamePart.write, obj.name[i]);
    if (obj.identifier_value) pbf.writeStringField(3, obj.identifier_value);
    if (obj.positive_int_value) pbf.writeVarintField(4, obj.positive_int_value);
    if (obj.negative_int_value) pbf.writeVarintField(5, obj.negative_int_value);
    if (obj.double_value) pbf.writeDoubleField(6, obj.double_value);
    if (obj.string_value) pbf.writeBytesField(7, obj.string_value);
    if (obj.aggregate_value) pbf.writeStringField(8, obj.aggregate_value);
};

// UninterpretedOption.NamePart ========================================

UninterpretedOption.NamePart = {};

UninterpretedOption.NamePart.read = function (pbf, end) {
    return pbf.readFields(UninterpretedOption.NamePart._readField, { name_part: "", is_extension: false }, end);
};
UninterpretedOption.NamePart._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name_part = pbf.readString();
    else if (tag === 2) obj.is_extension = pbf.readBoolean();
};
UninterpretedOption.NamePart.write = function (obj, pbf) {
    if (obj.name_part) pbf.writeStringField(1, obj.name_part);
    if (obj.is_extension) pbf.writeBooleanField(2, obj.is_extension);
};

// SourceCodeInfo ========================================

var SourceCodeInfo = exports.SourceCodeInfo = {};

SourceCodeInfo.read = function (pbf, end) {
    return pbf.readFields(SourceCodeInfo._readField, { location: [] }, end);
};
SourceCodeInfo._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.location.push(SourceCodeInfo.Location.read(pbf, pbf.readVarint() + pbf.pos));
};
SourceCodeInfo.write = function (obj, pbf) {
    if (obj.location) for (var i = 0; i < obj.location.length; i++) pbf.writeMessage(1, SourceCodeInfo.Location.write, obj.location[i]);
};

// SourceCodeInfo.Location ========================================

SourceCodeInfo.Location = {};

SourceCodeInfo.Location.read = function (pbf, end) {
    return pbf.readFields(SourceCodeInfo.Location._readField, { path: [], span: [] }, end);
};
SourceCodeInfo.Location._readField = function (tag, obj, pbf) {
    if (tag === 1) pbf.readPackedVarint(obj.path, true);
    else if (tag === 2) pbf.readPackedVarint(obj.span, true);
};
SourceCodeInfo.Location.write = function (obj, pbf) {
    if (obj.path) pbf.writePackedVarint(1, obj.path);
    if (obj.span) pbf.writePackedVarint(2, obj.span);
};

// NanoPBOptions ========================================

var NanoPBOptions = exports.NanoPBOptions = {};

NanoPBOptions.read = function (pbf, end) {
    return pbf.readFields(NanoPBOptions._readField, { max_size: 0, max_length: 0, max_count: 0, int_size: { "value": 0, "options": {} }, type: { "value": 0, "options": {} }, long_names: true, packed_struct: false, packed_enum: false, skip_message: false, no_unions: false, msgid: 0, anonymous_oneof: false, proto3: false, enum_to_string: false, fixed_length: false }, end);
};
NanoPBOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.max_size = pbf.readVarint(true);
    else if (tag === 14) obj.max_length = pbf.readVarint(true);
    else if (tag === 2) obj.max_count = pbf.readVarint(true);
    else if (tag === 7) obj.int_size = pbf.readVarint();
    else if (tag === 3) obj.type = pbf.readVarint();
    else if (tag === 4) obj.long_names = pbf.readBoolean();
    else if (tag === 5) obj.packed_struct = pbf.readBoolean();
    else if (tag === 10) obj.packed_enum = pbf.readBoolean();
    else if (tag === 6) obj.skip_message = pbf.readBoolean();
    else if (tag === 8) obj.no_unions = pbf.readBoolean();
    else if (tag === 9) obj.msgid = pbf.readVarint();
    else if (tag === 11) obj.anonymous_oneof = pbf.readBoolean();
    else if (tag === 12) obj.proto3 = pbf.readBoolean();
    else if (tag === 13) obj.enum_to_string = pbf.readBoolean();
    else if (tag === 15) obj.fixed_length = pbf.readBoolean();
};
NanoPBOptions.write = function (obj, pbf) {
    if (obj.max_size) pbf.writeVarintField(1, obj.max_size);
    if (obj.max_length) pbf.writeVarintField(14, obj.max_length);
    if (obj.max_count) pbf.writeVarintField(2, obj.max_count);
    if (obj.int_size != undefined && obj.int_size !== { "value": 0, "options": {} }) pbf.writeVarintField(7, obj.int_size);
    if (obj.type != undefined && obj.type !== { "value": 0, "options": {} }) pbf.writeVarintField(3, obj.type);
    if (obj.long_names != undefined && obj.long_names !== true) pbf.writeBooleanField(4, obj.long_names);
    if (obj.packed_struct) pbf.writeBooleanField(5, obj.packed_struct);
    if (obj.packed_enum) pbf.writeBooleanField(10, obj.packed_enum);
    if (obj.skip_message) pbf.writeBooleanField(6, obj.skip_message);
    if (obj.no_unions) pbf.writeBooleanField(8, obj.no_unions);
    if (obj.msgid) pbf.writeVarintField(9, obj.msgid);
    if (obj.anonymous_oneof) pbf.writeBooleanField(11, obj.anonymous_oneof);
    if (obj.proto3) pbf.writeBooleanField(12, obj.proto3);
    if (obj.enum_to_string) pbf.writeBooleanField(13, obj.enum_to_string);
    if (obj.fixed_length) pbf.writeBooleanField(15, obj.fixed_length);
};

// FileDescriptorSet ========================================

var FileDescriptorSet = exports.FileDescriptorSet = {};

FileDescriptorSet.read = function (pbf, end) {
    return pbf.readFields(FileDescriptorSet._readField, { file: [] }, end);
};
FileDescriptorSet._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.file.push(FileDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
};
FileDescriptorSet.write = function (obj, pbf) {
    if (obj.file) for (var i = 0; i < obj.file.length; i++) pbf.writeMessage(1, FileDescriptorProto.write, obj.file[i]);
};

// FileDescriptorProto ========================================

var FileDescriptorProto = exports.FileDescriptorProto = {};

FileDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(FileDescriptorProto._readField, { name: "", package: "", dependency: [], message_type: [], enum_type: [], service: [], extension: [], options: null, source_code_info: null }, end);
};
FileDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.package = pbf.readString();
    else if (tag === 3) obj.dependency.push(pbf.readString());
    else if (tag === 4) obj.message_type.push(DescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 5) obj.enum_type.push(EnumDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 6) obj.service.push(ServiceDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 7) obj.extension.push(FieldDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 8) obj.options = FileOptions.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 9) obj.source_code_info = SourceCodeInfo.read(pbf, pbf.readVarint() + pbf.pos);
};
FileDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.package) pbf.writeStringField(2, obj.package);
    if (obj.dependency) for (var i = 0; i < obj.dependency.length; i++) pbf.writeStringField(3, obj.dependency[i]);
    if (obj.message_type) for (i = 0; i < obj.message_type.length; i++) pbf.writeMessage(4, DescriptorProto.write, obj.message_type[i]);
    if (obj.enum_type) for (i = 0; i < obj.enum_type.length; i++) pbf.writeMessage(5, EnumDescriptorProto.write, obj.enum_type[i]);
    if (obj.service) for (i = 0; i < obj.service.length; i++) pbf.writeMessage(6, ServiceDescriptorProto.write, obj.service[i]);
    if (obj.extension) for (i = 0; i < obj.extension.length; i++) pbf.writeMessage(7, FieldDescriptorProto.write, obj.extension[i]);
    if (obj.options) pbf.writeMessage(8, FileOptions.write, obj.options);
    if (obj.source_code_info) pbf.writeMessage(9, SourceCodeInfo.write, obj.source_code_info);
};

// DescriptorProto ========================================

var DescriptorProto = exports.DescriptorProto = {};

DescriptorProto.read = function (pbf, end) {
    return pbf.readFields(DescriptorProto._readField, { name: "", field: [], extension: [], nested_type: [], enum_type: [], extension_range: [], options: null }, end);
};
DescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.field.push(FieldDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 6) obj.extension.push(FieldDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.nested_type.push(DescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 4) obj.enum_type.push(EnumDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 5) obj.extension_range.push(DescriptorProto.ExtensionRange.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 7) obj.options = MessageOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
DescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.field) for (var i = 0; i < obj.field.length; i++) pbf.writeMessage(2, FieldDescriptorProto.write, obj.field[i]);
    if (obj.extension) for (i = 0; i < obj.extension.length; i++) pbf.writeMessage(6, FieldDescriptorProto.write, obj.extension[i]);
    if (obj.nested_type) for (i = 0; i < obj.nested_type.length; i++) pbf.writeMessage(3, DescriptorProto.write, obj.nested_type[i]);
    if (obj.enum_type) for (i = 0; i < obj.enum_type.length; i++) pbf.writeMessage(4, EnumDescriptorProto.write, obj.enum_type[i]);
    if (obj.extension_range) for (i = 0; i < obj.extension_range.length; i++) pbf.writeMessage(5, DescriptorProto.ExtensionRange.write, obj.extension_range[i]);
    if (obj.options) pbf.writeMessage(7, MessageOptions.write, obj.options);
};

// DescriptorProto.ExtensionRange ========================================

DescriptorProto.ExtensionRange = {};

DescriptorProto.ExtensionRange.read = function (pbf, end) {
    return pbf.readFields(DescriptorProto.ExtensionRange._readField, { start: 0, end: 0 }, end);
};
DescriptorProto.ExtensionRange._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.start = pbf.readVarint(true);
    else if (tag === 2) obj.end = pbf.readVarint(true);
};
DescriptorProto.ExtensionRange.write = function (obj, pbf) {
    if (obj.start) pbf.writeVarintField(1, obj.start);
    if (obj.end) pbf.writeVarintField(2, obj.end);
};

// FieldDescriptorProto ========================================

var FieldDescriptorProto = exports.FieldDescriptorProto = {};

FieldDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(FieldDescriptorProto._readField, { name: "", number: 0, label: 0, type: 0, type_name: "", extendee: "", default_value: "", options: null }, end);
};
FieldDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 3) obj.number = pbf.readVarint(true);
    else if (tag === 4) obj.label = pbf.readVarint();
    else if (tag === 5) obj.type = pbf.readVarint();
    else if (tag === 6) obj.type_name = pbf.readString();
    else if (tag === 2) obj.extendee = pbf.readString();
    else if (tag === 7) obj.default_value = pbf.readString();
    else if (tag === 8) obj.options = FieldOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
FieldDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.number) pbf.writeVarintField(3, obj.number);
    if (obj.label) pbf.writeVarintField(4, obj.label);
    if (obj.type) pbf.writeVarintField(5, obj.type);
    if (obj.type_name) pbf.writeStringField(6, obj.type_name);
    if (obj.extendee) pbf.writeStringField(2, obj.extendee);
    if (obj.default_value) pbf.writeStringField(7, obj.default_value);
    if (obj.options) pbf.writeMessage(8, FieldOptions.write, obj.options);
};

FieldDescriptorProto.Type = {
    "TYPE_DOUBLE": {
        "value": 1,
        "options": {}
    },
    "TYPE_FLOAT": {
        "value": 2,
        "options": {}
    },
    "TYPE_INT64": {
        "value": 3,
        "options": {}
    },
    "TYPE_UINT64": {
        "value": 4,
        "options": {}
    },
    "TYPE_INT32": {
        "value": 5,
        "options": {}
    },
    "TYPE_FIXED64": {
        "value": 6,
        "options": {}
    },
    "TYPE_FIXED32": {
        "value": 7,
        "options": {}
    },
    "TYPE_BOOL": {
        "value": 8,
        "options": {}
    },
    "TYPE_STRING": {
        "value": 9,
        "options": {}
    },
    "TYPE_GROUP": {
        "value": 10,
        "options": {}
    },
    "TYPE_MESSAGE": {
        "value": 11,
        "options": {}
    },
    "TYPE_BYTES": {
        "value": 12,
        "options": {}
    },
    "TYPE_UINT32": {
        "value": 13,
        "options": {}
    },
    "TYPE_ENUM": {
        "value": 14,
        "options": {}
    },
    "TYPE_SFIXED32": {
        "value": 15,
        "options": {}
    },
    "TYPE_SFIXED64": {
        "value": 16,
        "options": {}
    },
    "TYPE_SINT32": {
        "value": 17,
        "options": {}
    },
    "TYPE_SINT64": {
        "value": 18,
        "options": {}
    }
};

FieldDescriptorProto.Label = {
    "LABEL_OPTIONAL": {
        "value": 1,
        "options": {}
    },
    "LABEL_REQUIRED": {
        "value": 2,
        "options": {}
    },
    "LABEL_REPEATED": {
        "value": 3,
        "options": {}
    }
};

// EnumDescriptorProto ========================================

var EnumDescriptorProto = exports.EnumDescriptorProto = {};

EnumDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(EnumDescriptorProto._readField, { name: "", value: [], options: null }, end);
};
EnumDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.value.push(EnumValueDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.options = EnumOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
EnumDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.value) for (var i = 0; i < obj.value.length; i++) pbf.writeMessage(2, EnumValueDescriptorProto.write, obj.value[i]);
    if (obj.options) pbf.writeMessage(3, EnumOptions.write, obj.options);
};

// EnumValueDescriptorProto ========================================

var EnumValueDescriptorProto = exports.EnumValueDescriptorProto = {};

EnumValueDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(EnumValueDescriptorProto._readField, { name: "", number: 0, options: null }, end);
};
EnumValueDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.number = pbf.readVarint(true);
    else if (tag === 3) obj.options = EnumValueOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
EnumValueDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.number) pbf.writeVarintField(2, obj.number);
    if (obj.options) pbf.writeMessage(3, EnumValueOptions.write, obj.options);
};

// ServiceDescriptorProto ========================================

var ServiceDescriptorProto = exports.ServiceDescriptorProto = {};

ServiceDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(ServiceDescriptorProto._readField, { name: "", method: [], options: null }, end);
};
ServiceDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.method.push(MethodDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.options = ServiceOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
ServiceDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.method) for (var i = 0; i < obj.method.length; i++) pbf.writeMessage(2, MethodDescriptorProto.write, obj.method[i]);
    if (obj.options) pbf.writeMessage(3, ServiceOptions.write, obj.options);
};

// MethodDescriptorProto ========================================

var MethodDescriptorProto = exports.MethodDescriptorProto = {};

MethodDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(MethodDescriptorProto._readField, { name: "", input_type: "", output_type: "", options: null }, end);
};
MethodDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.input_type = pbf.readString();
    else if (tag === 3) obj.output_type = pbf.readString();
    else if (tag === 4) obj.options = MethodOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
MethodDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.input_type) pbf.writeStringField(2, obj.input_type);
    if (obj.output_type) pbf.writeStringField(3, obj.output_type);
    if (obj.options) pbf.writeMessage(4, MethodOptions.write, obj.options);
};

// FileOptions ========================================

var FileOptions = exports.FileOptions = {};

FileOptions.read = function (pbf, end) {
    return pbf.readFields(FileOptions._readField, { java_package: "", java_outer_classname: "", java_multiple_files: false, java_generate_equals_and_hash: false, optimize_for: { "value": 1, "options": {} }, cc_generic_services: false, java_generic_services: false, py_generic_services: false, uninterpreted_option: [] }, end);
};
FileOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.java_package = pbf.readString();
    else if (tag === 8) obj.java_outer_classname = pbf.readString();
    else if (tag === 10) obj.java_multiple_files = pbf.readBoolean();
    else if (tag === 20) obj.java_generate_equals_and_hash = pbf.readBoolean();
    else if (tag === 9) obj.optimize_for = pbf.readVarint();
    else if (tag === 16) obj.cc_generic_services = pbf.readBoolean();
    else if (tag === 17) obj.java_generic_services = pbf.readBoolean();
    else if (tag === 18) obj.py_generic_services = pbf.readBoolean();
    else if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
FileOptions.write = function (obj, pbf) {
    if (obj.java_package) pbf.writeStringField(1, obj.java_package);
    if (obj.java_outer_classname) pbf.writeStringField(8, obj.java_outer_classname);
    if (obj.java_multiple_files) pbf.writeBooleanField(10, obj.java_multiple_files);
    if (obj.java_generate_equals_and_hash) pbf.writeBooleanField(20, obj.java_generate_equals_and_hash);
    if (obj.optimize_for != undefined && obj.optimize_for !== { "value": 1, "options": {} }) pbf.writeVarintField(9, obj.optimize_for);
    if (obj.cc_generic_services) pbf.writeBooleanField(16, obj.cc_generic_services);
    if (obj.java_generic_services) pbf.writeBooleanField(17, obj.java_generic_services);
    if (obj.py_generic_services) pbf.writeBooleanField(18, obj.py_generic_services);
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

FileOptions.OptimizeMode = {
    "SPEED": {
        "value": 1,
        "options": {}
    },
    "CODE_SIZE": {
        "value": 2,
        "options": {}
    },
    "LITE_RUNTIME": {
        "value": 3,
        "options": {}
    }
};

// MessageOptions ========================================

var MessageOptions = exports.MessageOptions = {};

MessageOptions.read = function (pbf, end) {
    return pbf.readFields(MessageOptions._readField, { message_set_wire_format: false, no_standard_descriptor_accessor: false, uninterpreted_option: [] }, end);
};
MessageOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message_set_wire_format = pbf.readBoolean();
    else if (tag === 2) obj.no_standard_descriptor_accessor = pbf.readBoolean();
    else if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
MessageOptions.write = function (obj, pbf) {
    if (obj.message_set_wire_format) pbf.writeBooleanField(1, obj.message_set_wire_format);
    if (obj.no_standard_descriptor_accessor) pbf.writeBooleanField(2, obj.no_standard_descriptor_accessor);
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// FieldOptions ========================================

var FieldOptions = exports.FieldOptions = {};

FieldOptions.read = function (pbf, end) {
    return pbf.readFields(FieldOptions._readField, { ctype: { "value": 0, "options": {} }, packed: false, deprecated: false, experimental_map_key: "", uninterpreted_option: [] }, end);
};
FieldOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.ctype = pbf.readVarint();
    else if (tag === 2) obj.packed = pbf.readBoolean();
    else if (tag === 3) obj.deprecated = pbf.readBoolean();
    else if (tag === 9) obj.experimental_map_key = pbf.readString();
    else if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
FieldOptions.write = function (obj, pbf) {
    if (obj.ctype != undefined && obj.ctype !== { "value": 0, "options": {} }) pbf.writeVarintField(1, obj.ctype);
    if (obj.packed) pbf.writeBooleanField(2, obj.packed);
    if (obj.deprecated) pbf.writeBooleanField(3, obj.deprecated);
    if (obj.experimental_map_key) pbf.writeStringField(9, obj.experimental_map_key);
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

FieldOptions.CType = {
    "STRING": {
        "value": 0,
        "options": {}
    },
    "CORD": {
        "value": 1,
        "options": {}
    },
    "STRING_PIECE": {
        "value": 2,
        "options": {}
    }
};

// EnumOptions ========================================

var EnumOptions = exports.EnumOptions = {};

EnumOptions.read = function (pbf, end) {
    return pbf.readFields(EnumOptions._readField, { uninterpreted_option: [] }, end);
};
EnumOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
EnumOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// EnumValueOptions ========================================

var EnumValueOptions = exports.EnumValueOptions = {};

EnumValueOptions.read = function (pbf, end) {
    return pbf.readFields(EnumValueOptions._readField, { uninterpreted_option: [] }, end);
};
EnumValueOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
EnumValueOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// ServiceOptions ========================================

var ServiceOptions = exports.ServiceOptions = {};

ServiceOptions.read = function (pbf, end) {
    return pbf.readFields(ServiceOptions._readField, { uninterpreted_option: [] }, end);
};
ServiceOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
ServiceOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// MethodOptions ========================================

var MethodOptions = exports.MethodOptions = {};

MethodOptions.read = function (pbf, end) {
    return pbf.readFields(MethodOptions._readField, { uninterpreted_option: [] }, end);
};
MethodOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
MethodOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// UninterpretedOption ========================================

var UninterpretedOption = exports.UninterpretedOption = {};

UninterpretedOption.read = function (pbf, end) {
    return pbf.readFields(UninterpretedOption._readField, { name: [], identifier_value: "", positive_int_value: 0, negative_int_value: 0, double_value: 0, string_value: null, aggregate_value: "" }, end);
};
UninterpretedOption._readField = function (tag, obj, pbf) {
    if (tag === 2) obj.name.push(UninterpretedOption.NamePart.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.identifier_value = pbf.readString();
    else if (tag === 4) obj.positive_int_value = pbf.readVarint();
    else if (tag === 5) obj.negative_int_value = pbf.readVarint(true);
    else if (tag === 6) obj.double_value = pbf.readDouble();
    else if (tag === 7) obj.string_value = pbf.readBytes();
    else if (tag === 8) obj.aggregate_value = pbf.readString();
};
UninterpretedOption.write = function (obj, pbf) {
    if (obj.name) for (var i = 0; i < obj.name.length; i++) pbf.writeMessage(2, UninterpretedOption.NamePart.write, obj.name[i]);
    if (obj.identifier_value) pbf.writeStringField(3, obj.identifier_value);
    if (obj.positive_int_value) pbf.writeVarintField(4, obj.positive_int_value);
    if (obj.negative_int_value) pbf.writeVarintField(5, obj.negative_int_value);
    if (obj.double_value) pbf.writeDoubleField(6, obj.double_value);
    if (obj.string_value) pbf.writeBytesField(7, obj.string_value);
    if (obj.aggregate_value) pbf.writeStringField(8, obj.aggregate_value);
};

// UninterpretedOption.NamePart ========================================

UninterpretedOption.NamePart = {};

UninterpretedOption.NamePart.read = function (pbf, end) {
    return pbf.readFields(UninterpretedOption.NamePart._readField, { name_part: "", is_extension: false }, end);
};
UninterpretedOption.NamePart._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name_part = pbf.readString();
    else if (tag === 2) obj.is_extension = pbf.readBoolean();
};
UninterpretedOption.NamePart.write = function (obj, pbf) {
    if (obj.name_part) pbf.writeStringField(1, obj.name_part);
    if (obj.is_extension) pbf.writeBooleanField(2, obj.is_extension);
};

// SourceCodeInfo ========================================

var SourceCodeInfo = exports.SourceCodeInfo = {};

SourceCodeInfo.read = function (pbf, end) {
    return pbf.readFields(SourceCodeInfo._readField, { location: [] }, end);
};
SourceCodeInfo._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.location.push(SourceCodeInfo.Location.read(pbf, pbf.readVarint() + pbf.pos));
};
SourceCodeInfo.write = function (obj, pbf) {
    if (obj.location) for (var i = 0; i < obj.location.length; i++) pbf.writeMessage(1, SourceCodeInfo.Location.write, obj.location[i]);
};

// SourceCodeInfo.Location ========================================

SourceCodeInfo.Location = {};

SourceCodeInfo.Location.read = function (pbf, end) {
    return pbf.readFields(SourceCodeInfo.Location._readField, { path: [], span: [] }, end);
};
SourceCodeInfo.Location._readField = function (tag, obj, pbf) {
    if (tag === 1) pbf.readPackedVarint(obj.path, true);
    else if (tag === 2) pbf.readPackedVarint(obj.span, true);
};
SourceCodeInfo.Location.write = function (obj, pbf) {
    if (obj.path) pbf.writePackedVarint(1, obj.path);
    if (obj.span) pbf.writePackedVarint(2, obj.span);
};

// ScratchpadInfo ========================================

var ScratchpadInfo = exports.ScratchpadInfo = {};

ScratchpadInfo.read = function (pbf, end) {
    return pbf.readFields(ScratchpadInfo._readField, { len: 0, crc: 0, seq: 0 }, end);
};
ScratchpadInfo._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.len = pbf.readVarint();
    else if (tag === 2) obj.crc = pbf.readVarint();
    else if (tag === 3) obj.seq = pbf.readVarint();
};
ScratchpadInfo.write = function (obj, pbf) {
    if (obj.len) pbf.writeVarintField(1, obj.len);
    if (obj.crc) pbf.writeVarintField(2, obj.crc);
    if (obj.seq) pbf.writeVarintField(3, obj.seq);
};

// GetScratchpadStatusReq ========================================

var GetScratchpadStatusReq = exports.GetScratchpadStatusReq = {};

GetScratchpadStatusReq.read = function (pbf, end) {
    return pbf.readFields(GetScratchpadStatusReq._readField, { header: null }, end);
};
GetScratchpadStatusReq._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.header = RequestHeader.read(pbf, pbf.readVarint() + pbf.pos);
};
GetScratchpadStatusReq.write = function (obj, pbf) {
    if (obj.header) pbf.writeMessage(1, RequestHeader.write, obj.header);
};

// GetScratchpadStatusResp ========================================

var GetScratchpadStatusResp = exports.GetScratchpadStatusResp = {};

GetScratchpadStatusResp.read = function (pbf, end) {
    return pbf.readFields(GetScratchpadStatusResp._readField, { header: null, stored_scratchpad: null, stored_status: 0, stored_type: 0, processed_scratchpad: null, firmware_area_id: 0 }, end);
};
GetScratchpadStatusResp._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.header = ResponseHeader.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.stored_scratchpad = ScratchpadInfo.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 3) obj.stored_status = pbf.readVarint();
    else if (tag === 4) obj.stored_type = pbf.readVarint();
    else if (tag === 5) obj.processed_scratchpad = ScratchpadInfo.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 6) obj.firmware_area_id = pbf.readVarint();
};
GetScratchpadStatusResp.write = function (obj, pbf) {
    if (obj.header) pbf.writeMessage(1, ResponseHeader.write, obj.header);
    if (obj.stored_scratchpad) pbf.writeMessage(2, ScratchpadInfo.write, obj.stored_scratchpad);
    if (obj.stored_status) pbf.writeVarintField(3, obj.stored_status);
    if (obj.stored_type) pbf.writeVarintField(4, obj.stored_type);
    if (obj.processed_scratchpad) pbf.writeMessage(5, ScratchpadInfo.write, obj.processed_scratchpad);
    if (obj.firmware_area_id) pbf.writeVarintField(6, obj.firmware_area_id);
};

// UploadScratchpadReq ========================================

var UploadScratchpadReq = exports.UploadScratchpadReq = {};

UploadScratchpadReq.read = function (pbf, end) {
    return pbf.readFields(UploadScratchpadReq._readField, { header: null, seq: 0, scratchpad: null }, end);
};
UploadScratchpadReq._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.header = RequestHeader.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 2) obj.seq = pbf.readVarint();
    else if (tag === 3) obj.scratchpad = pbf.readBytes();
};
UploadScratchpadReq.write = function (obj, pbf) {
    if (obj.header) pbf.writeMessage(1, RequestHeader.write, obj.header);
    if (obj.seq) pbf.writeVarintField(2, obj.seq);
    if (obj.scratchpad) pbf.writeBytesField(3, obj.scratchpad);
};

// UploadScratchpadResp ========================================

var UploadScratchpadResp = exports.UploadScratchpadResp = {};

UploadScratchpadResp.read = function (pbf, end) {
    return pbf.readFields(UploadScratchpadResp._readField, { header: null }, end);
};
UploadScratchpadResp._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.header = ResponseHeader.read(pbf, pbf.readVarint() + pbf.pos);
};
UploadScratchpadResp.write = function (obj, pbf) {
    if (obj.header) pbf.writeMessage(1, ResponseHeader.write, obj.header);
};

// ProcessScratchpadReq ========================================

var ProcessScratchpadReq = exports.ProcessScratchpadReq = {};

ProcessScratchpadReq.read = function (pbf, end) {
    return pbf.readFields(ProcessScratchpadReq._readField, { header: null }, end);
};
ProcessScratchpadReq._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.header = RequestHeader.read(pbf, pbf.readVarint() + pbf.pos);
};
ProcessScratchpadReq.write = function (obj, pbf) {
    if (obj.header) pbf.writeMessage(1, RequestHeader.write, obj.header);
};

// ProcessScratchpadResp ========================================

var ProcessScratchpadResp = exports.ProcessScratchpadResp = {};

ProcessScratchpadResp.read = function (pbf, end) {
    return pbf.readFields(ProcessScratchpadResp._readField, { header: null }, end);
};
ProcessScratchpadResp._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.header = ResponseHeader.read(pbf, pbf.readVarint() + pbf.pos);
};
ProcessScratchpadResp.write = function (obj, pbf) {
    if (obj.header) pbf.writeMessage(1, ResponseHeader.write, obj.header);
};

// RequestHeader ========================================

var RequestHeader = exports.RequestHeader = {};

RequestHeader.read = function (pbf, end) {
    return pbf.readFields(RequestHeader._readField, { req_id: 0, sink_id: "" }, end);
};
RequestHeader._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.req_id = pbf.readVarint();
    else if (tag === 2) obj.sink_id = pbf.readString();
};
RequestHeader.write = function (obj, pbf) {
    if (obj.req_id) pbf.writeVarintField(1, obj.req_id);
    if (obj.sink_id) pbf.writeStringField(2, obj.sink_id);
};

// ResponseHeader ========================================

var ResponseHeader = exports.ResponseHeader = {};

ResponseHeader.read = function (pbf, end) {
    return pbf.readFields(ResponseHeader._readField, { req_id: 0, gw_id: "", sink_id: "", res: 0 }, end);
};
ResponseHeader._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.req_id = pbf.readVarint();
    else if (tag === 2) obj.gw_id = pbf.readString();
    else if (tag === 3) obj.sink_id = pbf.readString();
    else if (tag === 4) obj.res = pbf.readVarint();
};
ResponseHeader.write = function (obj, pbf) {
    if (obj.req_id) pbf.writeVarintField(1, obj.req_id);
    if (obj.gw_id) pbf.writeStringField(2, obj.gw_id);
    if (obj.sink_id) pbf.writeStringField(3, obj.sink_id);
    if (obj.res) pbf.writeVarintField(4, obj.res);
};

// EventHeader ========================================

var EventHeader = exports.EventHeader = {};

EventHeader.read = function (pbf, end) {
    return pbf.readFields(EventHeader._readField, { gw_id: "", sink_id: "", event_id: 0 }, end);
};
EventHeader._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.gw_id = pbf.readString();
    else if (tag === 2) obj.sink_id = pbf.readString();
    else if (tag === 3) obj.event_id = pbf.readVarint();
};
EventHeader.write = function (obj, pbf) {
    if (obj.gw_id) pbf.writeStringField(1, obj.gw_id);
    if (obj.sink_id) pbf.writeStringField(2, obj.sink_id);
    if (obj.event_id) pbf.writeVarintField(3, obj.event_id);
};

// FirmwareVersion ========================================

var FirmwareVersion = exports.FirmwareVersion = {};

FirmwareVersion.read = function (pbf, end) {
    return pbf.readFields(FirmwareVersion._readField, { major: 0, minor: 0, maint: 0, dev: 0 }, end);
};
FirmwareVersion._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.major = pbf.readVarint();
    else if (tag === 2) obj.minor = pbf.readVarint();
    else if (tag === 3) obj.maint = pbf.readVarint();
    else if (tag === 4) obj.dev = pbf.readVarint();
};
FirmwareVersion.write = function (obj, pbf) {
    if (obj.major) pbf.writeVarintField(1, obj.major);
    if (obj.minor) pbf.writeVarintField(2, obj.minor);
    if (obj.maint) pbf.writeVarintField(3, obj.maint);
    if (obj.dev) pbf.writeVarintField(4, obj.dev);
};

// NanoPBOptions ========================================

var NanoPBOptions = exports.NanoPBOptions = {};

NanoPBOptions.read = function (pbf, end) {
    return pbf.readFields(NanoPBOptions._readField, { max_size: 0, max_length: 0, max_count: 0, int_size: { "value": 0, "options": {} }, type: { "value": 0, "options": {} }, long_names: true, packed_struct: false, packed_enum: false, skip_message: false, no_unions: false, msgid: 0, anonymous_oneof: false, proto3: false, enum_to_string: false, fixed_length: false }, end);
};
NanoPBOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.max_size = pbf.readVarint(true);
    else if (tag === 14) obj.max_length = pbf.readVarint(true);
    else if (tag === 2) obj.max_count = pbf.readVarint(true);
    else if (tag === 7) obj.int_size = pbf.readVarint();
    else if (tag === 3) obj.type = pbf.readVarint();
    else if (tag === 4) obj.long_names = pbf.readBoolean();
    else if (tag === 5) obj.packed_struct = pbf.readBoolean();
    else if (tag === 10) obj.packed_enum = pbf.readBoolean();
    else if (tag === 6) obj.skip_message = pbf.readBoolean();
    else if (tag === 8) obj.no_unions = pbf.readBoolean();
    else if (tag === 9) obj.msgid = pbf.readVarint();
    else if (tag === 11) obj.anonymous_oneof = pbf.readBoolean();
    else if (tag === 12) obj.proto3 = pbf.readBoolean();
    else if (tag === 13) obj.enum_to_string = pbf.readBoolean();
    else if (tag === 15) obj.fixed_length = pbf.readBoolean();
};
NanoPBOptions.write = function (obj, pbf) {
    if (obj.max_size) pbf.writeVarintField(1, obj.max_size);
    if (obj.max_length) pbf.writeVarintField(14, obj.max_length);
    if (obj.max_count) pbf.writeVarintField(2, obj.max_count);
    if (obj.int_size != undefined && obj.int_size !== { "value": 0, "options": {} }) pbf.writeVarintField(7, obj.int_size);
    if (obj.type != undefined && obj.type !== { "value": 0, "options": {} }) pbf.writeVarintField(3, obj.type);
    if (obj.long_names != undefined && obj.long_names !== true) pbf.writeBooleanField(4, obj.long_names);
    if (obj.packed_struct) pbf.writeBooleanField(5, obj.packed_struct);
    if (obj.packed_enum) pbf.writeBooleanField(10, obj.packed_enum);
    if (obj.skip_message) pbf.writeBooleanField(6, obj.skip_message);
    if (obj.no_unions) pbf.writeBooleanField(8, obj.no_unions);
    if (obj.msgid) pbf.writeVarintField(9, obj.msgid);
    if (obj.anonymous_oneof) pbf.writeBooleanField(11, obj.anonymous_oneof);
    if (obj.proto3) pbf.writeBooleanField(12, obj.proto3);
    if (obj.enum_to_string) pbf.writeBooleanField(13, obj.enum_to_string);
    if (obj.fixed_length) pbf.writeBooleanField(15, obj.fixed_length);
};

// FileDescriptorSet ========================================

var FileDescriptorSet = exports.FileDescriptorSet = {};

FileDescriptorSet.read = function (pbf, end) {
    return pbf.readFields(FileDescriptorSet._readField, { file: [] }, end);
};
FileDescriptorSet._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.file.push(FileDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
};
FileDescriptorSet.write = function (obj, pbf) {
    if (obj.file) for (var i = 0; i < obj.file.length; i++) pbf.writeMessage(1, FileDescriptorProto.write, obj.file[i]);
};

// FileDescriptorProto ========================================

var FileDescriptorProto = exports.FileDescriptorProto = {};

FileDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(FileDescriptorProto._readField, { name: "", package: "", dependency: [], message_type: [], enum_type: [], service: [], extension: [], options: null, source_code_info: null }, end);
};
FileDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.package = pbf.readString();
    else if (tag === 3) obj.dependency.push(pbf.readString());
    else if (tag === 4) obj.message_type.push(DescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 5) obj.enum_type.push(EnumDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 6) obj.service.push(ServiceDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 7) obj.extension.push(FieldDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 8) obj.options = FileOptions.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 9) obj.source_code_info = SourceCodeInfo.read(pbf, pbf.readVarint() + pbf.pos);
};
FileDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.package) pbf.writeStringField(2, obj.package);
    if (obj.dependency) for (var i = 0; i < obj.dependency.length; i++) pbf.writeStringField(3, obj.dependency[i]);
    if (obj.message_type) for (i = 0; i < obj.message_type.length; i++) pbf.writeMessage(4, DescriptorProto.write, obj.message_type[i]);
    if (obj.enum_type) for (i = 0; i < obj.enum_type.length; i++) pbf.writeMessage(5, EnumDescriptorProto.write, obj.enum_type[i]);
    if (obj.service) for (i = 0; i < obj.service.length; i++) pbf.writeMessage(6, ServiceDescriptorProto.write, obj.service[i]);
    if (obj.extension) for (i = 0; i < obj.extension.length; i++) pbf.writeMessage(7, FieldDescriptorProto.write, obj.extension[i]);
    if (obj.options) pbf.writeMessage(8, FileOptions.write, obj.options);
    if (obj.source_code_info) pbf.writeMessage(9, SourceCodeInfo.write, obj.source_code_info);
};

// DescriptorProto ========================================

var DescriptorProto = exports.DescriptorProto = {};

DescriptorProto.read = function (pbf, end) {
    return pbf.readFields(DescriptorProto._readField, { name: "", field: [], extension: [], nested_type: [], enum_type: [], extension_range: [], options: null }, end);
};
DescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.field.push(FieldDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 6) obj.extension.push(FieldDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.nested_type.push(DescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 4) obj.enum_type.push(EnumDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 5) obj.extension_range.push(DescriptorProto.ExtensionRange.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 7) obj.options = MessageOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
DescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.field) for (var i = 0; i < obj.field.length; i++) pbf.writeMessage(2, FieldDescriptorProto.write, obj.field[i]);
    if (obj.extension) for (i = 0; i < obj.extension.length; i++) pbf.writeMessage(6, FieldDescriptorProto.write, obj.extension[i]);
    if (obj.nested_type) for (i = 0; i < obj.nested_type.length; i++) pbf.writeMessage(3, DescriptorProto.write, obj.nested_type[i]);
    if (obj.enum_type) for (i = 0; i < obj.enum_type.length; i++) pbf.writeMessage(4, EnumDescriptorProto.write, obj.enum_type[i]);
    if (obj.extension_range) for (i = 0; i < obj.extension_range.length; i++) pbf.writeMessage(5, DescriptorProto.ExtensionRange.write, obj.extension_range[i]);
    if (obj.options) pbf.writeMessage(7, MessageOptions.write, obj.options);
};

// DescriptorProto.ExtensionRange ========================================

DescriptorProto.ExtensionRange = {};

DescriptorProto.ExtensionRange.read = function (pbf, end) {
    return pbf.readFields(DescriptorProto.ExtensionRange._readField, { start: 0, end: 0 }, end);
};
DescriptorProto.ExtensionRange._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.start = pbf.readVarint(true);
    else if (tag === 2) obj.end = pbf.readVarint(true);
};
DescriptorProto.ExtensionRange.write = function (obj, pbf) {
    if (obj.start) pbf.writeVarintField(1, obj.start);
    if (obj.end) pbf.writeVarintField(2, obj.end);
};

// FieldDescriptorProto ========================================

var FieldDescriptorProto = exports.FieldDescriptorProto = {};

FieldDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(FieldDescriptorProto._readField, { name: "", number: 0, label: 0, type: 0, type_name: "", extendee: "", default_value: "", options: null }, end);
};
FieldDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 3) obj.number = pbf.readVarint(true);
    else if (tag === 4) obj.label = pbf.readVarint();
    else if (tag === 5) obj.type = pbf.readVarint();
    else if (tag === 6) obj.type_name = pbf.readString();
    else if (tag === 2) obj.extendee = pbf.readString();
    else if (tag === 7) obj.default_value = pbf.readString();
    else if (tag === 8) obj.options = FieldOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
FieldDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.number) pbf.writeVarintField(3, obj.number);
    if (obj.label) pbf.writeVarintField(4, obj.label);
    if (obj.type) pbf.writeVarintField(5, obj.type);
    if (obj.type_name) pbf.writeStringField(6, obj.type_name);
    if (obj.extendee) pbf.writeStringField(2, obj.extendee);
    if (obj.default_value) pbf.writeStringField(7, obj.default_value);
    if (obj.options) pbf.writeMessage(8, FieldOptions.write, obj.options);
};

FieldDescriptorProto.Type = {
    "TYPE_DOUBLE": {
        "value": 1,
        "options": {}
    },
    "TYPE_FLOAT": {
        "value": 2,
        "options": {}
    },
    "TYPE_INT64": {
        "value": 3,
        "options": {}
    },
    "TYPE_UINT64": {
        "value": 4,
        "options": {}
    },
    "TYPE_INT32": {
        "value": 5,
        "options": {}
    },
    "TYPE_FIXED64": {
        "value": 6,
        "options": {}
    },
    "TYPE_FIXED32": {
        "value": 7,
        "options": {}
    },
    "TYPE_BOOL": {
        "value": 8,
        "options": {}
    },
    "TYPE_STRING": {
        "value": 9,
        "options": {}
    },
    "TYPE_GROUP": {
        "value": 10,
        "options": {}
    },
    "TYPE_MESSAGE": {
        "value": 11,
        "options": {}
    },
    "TYPE_BYTES": {
        "value": 12,
        "options": {}
    },
    "TYPE_UINT32": {
        "value": 13,
        "options": {}
    },
    "TYPE_ENUM": {
        "value": 14,
        "options": {}
    },
    "TYPE_SFIXED32": {
        "value": 15,
        "options": {}
    },
    "TYPE_SFIXED64": {
        "value": 16,
        "options": {}
    },
    "TYPE_SINT32": {
        "value": 17,
        "options": {}
    },
    "TYPE_SINT64": {
        "value": 18,
        "options": {}
    }
};

FieldDescriptorProto.Label = {
    "LABEL_OPTIONAL": {
        "value": 1,
        "options": {}
    },
    "LABEL_REQUIRED": {
        "value": 2,
        "options": {}
    },
    "LABEL_REPEATED": {
        "value": 3,
        "options": {}
    }
};

// EnumDescriptorProto ========================================

var EnumDescriptorProto = exports.EnumDescriptorProto = {};

EnumDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(EnumDescriptorProto._readField, { name: "", value: [], options: null }, end);
};
EnumDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.value.push(EnumValueDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.options = EnumOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
EnumDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.value) for (var i = 0; i < obj.value.length; i++) pbf.writeMessage(2, EnumValueDescriptorProto.write, obj.value[i]);
    if (obj.options) pbf.writeMessage(3, EnumOptions.write, obj.options);
};

// EnumValueDescriptorProto ========================================

var EnumValueDescriptorProto = exports.EnumValueDescriptorProto = {};

EnumValueDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(EnumValueDescriptorProto._readField, { name: "", number: 0, options: null }, end);
};
EnumValueDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.number = pbf.readVarint(true);
    else if (tag === 3) obj.options = EnumValueOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
EnumValueDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.number) pbf.writeVarintField(2, obj.number);
    if (obj.options) pbf.writeMessage(3, EnumValueOptions.write, obj.options);
};

// ServiceDescriptorProto ========================================

var ServiceDescriptorProto = exports.ServiceDescriptorProto = {};

ServiceDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(ServiceDescriptorProto._readField, { name: "", method: [], options: null }, end);
};
ServiceDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.method.push(MethodDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.options = ServiceOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
ServiceDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.method) for (var i = 0; i < obj.method.length; i++) pbf.writeMessage(2, MethodDescriptorProto.write, obj.method[i]);
    if (obj.options) pbf.writeMessage(3, ServiceOptions.write, obj.options);
};

// MethodDescriptorProto ========================================

var MethodDescriptorProto = exports.MethodDescriptorProto = {};

MethodDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(MethodDescriptorProto._readField, { name: "", input_type: "", output_type: "", options: null }, end);
};
MethodDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.input_type = pbf.readString();
    else if (tag === 3) obj.output_type = pbf.readString();
    else if (tag === 4) obj.options = MethodOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
MethodDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.input_type) pbf.writeStringField(2, obj.input_type);
    if (obj.output_type) pbf.writeStringField(3, obj.output_type);
    if (obj.options) pbf.writeMessage(4, MethodOptions.write, obj.options);
};

// FileOptions ========================================

var FileOptions = exports.FileOptions = {};

FileOptions.read = function (pbf, end) {
    return pbf.readFields(FileOptions._readField, { java_package: "", java_outer_classname: "", java_multiple_files: false, java_generate_equals_and_hash: false, optimize_for: { "value": 1, "options": {} }, cc_generic_services: false, java_generic_services: false, py_generic_services: false, uninterpreted_option: [] }, end);
};
FileOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.java_package = pbf.readString();
    else if (tag === 8) obj.java_outer_classname = pbf.readString();
    else if (tag === 10) obj.java_multiple_files = pbf.readBoolean();
    else if (tag === 20) obj.java_generate_equals_and_hash = pbf.readBoolean();
    else if (tag === 9) obj.optimize_for = pbf.readVarint();
    else if (tag === 16) obj.cc_generic_services = pbf.readBoolean();
    else if (tag === 17) obj.java_generic_services = pbf.readBoolean();
    else if (tag === 18) obj.py_generic_services = pbf.readBoolean();
    else if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
FileOptions.write = function (obj, pbf) {
    if (obj.java_package) pbf.writeStringField(1, obj.java_package);
    if (obj.java_outer_classname) pbf.writeStringField(8, obj.java_outer_classname);
    if (obj.java_multiple_files) pbf.writeBooleanField(10, obj.java_multiple_files);
    if (obj.java_generate_equals_and_hash) pbf.writeBooleanField(20, obj.java_generate_equals_and_hash);
    if (obj.optimize_for != undefined && obj.optimize_for !== { "value": 1, "options": {} }) pbf.writeVarintField(9, obj.optimize_for);
    if (obj.cc_generic_services) pbf.writeBooleanField(16, obj.cc_generic_services);
    if (obj.java_generic_services) pbf.writeBooleanField(17, obj.java_generic_services);
    if (obj.py_generic_services) pbf.writeBooleanField(18, obj.py_generic_services);
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

FileOptions.OptimizeMode = {
    "SPEED": {
        "value": 1,
        "options": {}
    },
    "CODE_SIZE": {
        "value": 2,
        "options": {}
    },
    "LITE_RUNTIME": {
        "value": 3,
        "options": {}
    }
};

// MessageOptions ========================================

var MessageOptions = exports.MessageOptions = {};

MessageOptions.read = function (pbf, end) {
    return pbf.readFields(MessageOptions._readField, { message_set_wire_format: false, no_standard_descriptor_accessor: false, uninterpreted_option: [] }, end);
};
MessageOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message_set_wire_format = pbf.readBoolean();
    else if (tag === 2) obj.no_standard_descriptor_accessor = pbf.readBoolean();
    else if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
MessageOptions.write = function (obj, pbf) {
    if (obj.message_set_wire_format) pbf.writeBooleanField(1, obj.message_set_wire_format);
    if (obj.no_standard_descriptor_accessor) pbf.writeBooleanField(2, obj.no_standard_descriptor_accessor);
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// FieldOptions ========================================

var FieldOptions = exports.FieldOptions = {};

FieldOptions.read = function (pbf, end) {
    return pbf.readFields(FieldOptions._readField, { ctype: { "value": 0, "options": {} }, packed: false, deprecated: false, experimental_map_key: "", uninterpreted_option: [] }, end);
};
FieldOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.ctype = pbf.readVarint();
    else if (tag === 2) obj.packed = pbf.readBoolean();
    else if (tag === 3) obj.deprecated = pbf.readBoolean();
    else if (tag === 9) obj.experimental_map_key = pbf.readString();
    else if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
FieldOptions.write = function (obj, pbf) {
    if (obj.ctype != undefined && obj.ctype !== { "value": 0, "options": {} }) pbf.writeVarintField(1, obj.ctype);
    if (obj.packed) pbf.writeBooleanField(2, obj.packed);
    if (obj.deprecated) pbf.writeBooleanField(3, obj.deprecated);
    if (obj.experimental_map_key) pbf.writeStringField(9, obj.experimental_map_key);
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

FieldOptions.CType = {
    "STRING": {
        "value": 0,
        "options": {}
    },
    "CORD": {
        "value": 1,
        "options": {}
    },
    "STRING_PIECE": {
        "value": 2,
        "options": {}
    }
};

// EnumOptions ========================================

var EnumOptions = exports.EnumOptions = {};

EnumOptions.read = function (pbf, end) {
    return pbf.readFields(EnumOptions._readField, { uninterpreted_option: [] }, end);
};
EnumOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
EnumOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// EnumValueOptions ========================================

var EnumValueOptions = exports.EnumValueOptions = {};

EnumValueOptions.read = function (pbf, end) {
    return pbf.readFields(EnumValueOptions._readField, { uninterpreted_option: [] }, end);
};
EnumValueOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
EnumValueOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// ServiceOptions ========================================

var ServiceOptions = exports.ServiceOptions = {};

ServiceOptions.read = function (pbf, end) {
    return pbf.readFields(ServiceOptions._readField, { uninterpreted_option: [] }, end);
};
ServiceOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
ServiceOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// MethodOptions ========================================

var MethodOptions = exports.MethodOptions = {};

MethodOptions.read = function (pbf, end) {
    return pbf.readFields(MethodOptions._readField, { uninterpreted_option: [] }, end);
};
MethodOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
MethodOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// UninterpretedOption ========================================

var UninterpretedOption = exports.UninterpretedOption = {};

UninterpretedOption.read = function (pbf, end) {
    return pbf.readFields(UninterpretedOption._readField, { name: [], identifier_value: "", positive_int_value: 0, negative_int_value: 0, double_value: 0, string_value: null, aggregate_value: "" }, end);
};
UninterpretedOption._readField = function (tag, obj, pbf) {
    if (tag === 2) obj.name.push(UninterpretedOption.NamePart.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.identifier_value = pbf.readString();
    else if (tag === 4) obj.positive_int_value = pbf.readVarint();
    else if (tag === 5) obj.negative_int_value = pbf.readVarint(true);
    else if (tag === 6) obj.double_value = pbf.readDouble();
    else if (tag === 7) obj.string_value = pbf.readBytes();
    else if (tag === 8) obj.aggregate_value = pbf.readString();
};
UninterpretedOption.write = function (obj, pbf) {
    if (obj.name) for (var i = 0; i < obj.name.length; i++) pbf.writeMessage(2, UninterpretedOption.NamePart.write, obj.name[i]);
    if (obj.identifier_value) pbf.writeStringField(3, obj.identifier_value);
    if (obj.positive_int_value) pbf.writeVarintField(4, obj.positive_int_value);
    if (obj.negative_int_value) pbf.writeVarintField(5, obj.negative_int_value);
    if (obj.double_value) pbf.writeDoubleField(6, obj.double_value);
    if (obj.string_value) pbf.writeBytesField(7, obj.string_value);
    if (obj.aggregate_value) pbf.writeStringField(8, obj.aggregate_value);
};

// UninterpretedOption.NamePart ========================================

UninterpretedOption.NamePart = {};

UninterpretedOption.NamePart.read = function (pbf, end) {
    return pbf.readFields(UninterpretedOption.NamePart._readField, { name_part: "", is_extension: false }, end);
};
UninterpretedOption.NamePart._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name_part = pbf.readString();
    else if (tag === 2) obj.is_extension = pbf.readBoolean();
};
UninterpretedOption.NamePart.write = function (obj, pbf) {
    if (obj.name_part) pbf.writeStringField(1, obj.name_part);
    if (obj.is_extension) pbf.writeBooleanField(2, obj.is_extension);
};

// SourceCodeInfo ========================================

var SourceCodeInfo = exports.SourceCodeInfo = {};

SourceCodeInfo.read = function (pbf, end) {
    return pbf.readFields(SourceCodeInfo._readField, { location: [] }, end);
};
SourceCodeInfo._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.location.push(SourceCodeInfo.Location.read(pbf, pbf.readVarint() + pbf.pos));
};
SourceCodeInfo.write = function (obj, pbf) {
    if (obj.location) for (var i = 0; i < obj.location.length; i++) pbf.writeMessage(1, SourceCodeInfo.Location.write, obj.location[i]);
};

// SourceCodeInfo.Location ========================================

SourceCodeInfo.Location = {};

SourceCodeInfo.Location.read = function (pbf, end) {
    return pbf.readFields(SourceCodeInfo.Location._readField, { path: [], span: [] }, end);
};
SourceCodeInfo.Location._readField = function (tag, obj, pbf) {
    if (tag === 1) pbf.readPackedVarint(obj.path, true);
    else if (tag === 2) pbf.readPackedVarint(obj.span, true);
};
SourceCodeInfo.Location.write = function (obj, pbf) {
    if (obj.path) pbf.writePackedVarint(1, obj.path);
    if (obj.span) pbf.writePackedVarint(2, obj.span);
};

// NanoPBOptions ========================================

var NanoPBOptions = exports.NanoPBOptions = {};

NanoPBOptions.read = function (pbf, end) {
    return pbf.readFields(NanoPBOptions._readField, { max_size: 0, max_length: 0, max_count: 0, int_size: { "value": 0, "options": {} }, type: { "value": 0, "options": {} }, long_names: true, packed_struct: false, packed_enum: false, skip_message: false, no_unions: false, msgid: 0, anonymous_oneof: false, proto3: false, enum_to_string: false, fixed_length: false }, end);
};
NanoPBOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.max_size = pbf.readVarint(true);
    else if (tag === 14) obj.max_length = pbf.readVarint(true);
    else if (tag === 2) obj.max_count = pbf.readVarint(true);
    else if (tag === 7) obj.int_size = pbf.readVarint();
    else if (tag === 3) obj.type = pbf.readVarint();
    else if (tag === 4) obj.long_names = pbf.readBoolean();
    else if (tag === 5) obj.packed_struct = pbf.readBoolean();
    else if (tag === 10) obj.packed_enum = pbf.readBoolean();
    else if (tag === 6) obj.skip_message = pbf.readBoolean();
    else if (tag === 8) obj.no_unions = pbf.readBoolean();
    else if (tag === 9) obj.msgid = pbf.readVarint();
    else if (tag === 11) obj.anonymous_oneof = pbf.readBoolean();
    else if (tag === 12) obj.proto3 = pbf.readBoolean();
    else if (tag === 13) obj.enum_to_string = pbf.readBoolean();
    else if (tag === 15) obj.fixed_length = pbf.readBoolean();
};
NanoPBOptions.write = function (obj, pbf) {
    if (obj.max_size) pbf.writeVarintField(1, obj.max_size);
    if (obj.max_length) pbf.writeVarintField(14, obj.max_length);
    if (obj.max_count) pbf.writeVarintField(2, obj.max_count);
    if (obj.int_size != undefined && obj.int_size !== { "value": 0, "options": {} }) pbf.writeVarintField(7, obj.int_size);
    if (obj.type != undefined && obj.type !== { "value": 0, "options": {} }) pbf.writeVarintField(3, obj.type);
    if (obj.long_names != undefined && obj.long_names !== true) pbf.writeBooleanField(4, obj.long_names);
    if (obj.packed_struct) pbf.writeBooleanField(5, obj.packed_struct);
    if (obj.packed_enum) pbf.writeBooleanField(10, obj.packed_enum);
    if (obj.skip_message) pbf.writeBooleanField(6, obj.skip_message);
    if (obj.no_unions) pbf.writeBooleanField(8, obj.no_unions);
    if (obj.msgid) pbf.writeVarintField(9, obj.msgid);
    if (obj.anonymous_oneof) pbf.writeBooleanField(11, obj.anonymous_oneof);
    if (obj.proto3) pbf.writeBooleanField(12, obj.proto3);
    if (obj.enum_to_string) pbf.writeBooleanField(13, obj.enum_to_string);
    if (obj.fixed_length) pbf.writeBooleanField(15, obj.fixed_length);
};

// FileDescriptorSet ========================================

var FileDescriptorSet = exports.FileDescriptorSet = {};

FileDescriptorSet.read = function (pbf, end) {
    return pbf.readFields(FileDescriptorSet._readField, { file: [] }, end);
};
FileDescriptorSet._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.file.push(FileDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
};
FileDescriptorSet.write = function (obj, pbf) {
    if (obj.file) for (var i = 0; i < obj.file.length; i++) pbf.writeMessage(1, FileDescriptorProto.write, obj.file[i]);
};

// FileDescriptorProto ========================================

var FileDescriptorProto = exports.FileDescriptorProto = {};

FileDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(FileDescriptorProto._readField, { name: "", package: "", dependency: [], message_type: [], enum_type: [], service: [], extension: [], options: null, source_code_info: null }, end);
};
FileDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.package = pbf.readString();
    else if (tag === 3) obj.dependency.push(pbf.readString());
    else if (tag === 4) obj.message_type.push(DescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 5) obj.enum_type.push(EnumDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 6) obj.service.push(ServiceDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 7) obj.extension.push(FieldDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 8) obj.options = FileOptions.read(pbf, pbf.readVarint() + pbf.pos);
    else if (tag === 9) obj.source_code_info = SourceCodeInfo.read(pbf, pbf.readVarint() + pbf.pos);
};
FileDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.package) pbf.writeStringField(2, obj.package);
    if (obj.dependency) for (var i = 0; i < obj.dependency.length; i++) pbf.writeStringField(3, obj.dependency[i]);
    if (obj.message_type) for (i = 0; i < obj.message_type.length; i++) pbf.writeMessage(4, DescriptorProto.write, obj.message_type[i]);
    if (obj.enum_type) for (i = 0; i < obj.enum_type.length; i++) pbf.writeMessage(5, EnumDescriptorProto.write, obj.enum_type[i]);
    if (obj.service) for (i = 0; i < obj.service.length; i++) pbf.writeMessage(6, ServiceDescriptorProto.write, obj.service[i]);
    if (obj.extension) for (i = 0; i < obj.extension.length; i++) pbf.writeMessage(7, FieldDescriptorProto.write, obj.extension[i]);
    if (obj.options) pbf.writeMessage(8, FileOptions.write, obj.options);
    if (obj.source_code_info) pbf.writeMessage(9, SourceCodeInfo.write, obj.source_code_info);
};

// DescriptorProto ========================================

var DescriptorProto = exports.DescriptorProto = {};

DescriptorProto.read = function (pbf, end) {
    return pbf.readFields(DescriptorProto._readField, { name: "", field: [], extension: [], nested_type: [], enum_type: [], extension_range: [], options: null }, end);
};
DescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.field.push(FieldDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 6) obj.extension.push(FieldDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.nested_type.push(DescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 4) obj.enum_type.push(EnumDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 5) obj.extension_range.push(DescriptorProto.ExtensionRange.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 7) obj.options = MessageOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
DescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.field) for (var i = 0; i < obj.field.length; i++) pbf.writeMessage(2, FieldDescriptorProto.write, obj.field[i]);
    if (obj.extension) for (i = 0; i < obj.extension.length; i++) pbf.writeMessage(6, FieldDescriptorProto.write, obj.extension[i]);
    if (obj.nested_type) for (i = 0; i < obj.nested_type.length; i++) pbf.writeMessage(3, DescriptorProto.write, obj.nested_type[i]);
    if (obj.enum_type) for (i = 0; i < obj.enum_type.length; i++) pbf.writeMessage(4, EnumDescriptorProto.write, obj.enum_type[i]);
    if (obj.extension_range) for (i = 0; i < obj.extension_range.length; i++) pbf.writeMessage(5, DescriptorProto.ExtensionRange.write, obj.extension_range[i]);
    if (obj.options) pbf.writeMessage(7, MessageOptions.write, obj.options);
};

// DescriptorProto.ExtensionRange ========================================

DescriptorProto.ExtensionRange = {};

DescriptorProto.ExtensionRange.read = function (pbf, end) {
    return pbf.readFields(DescriptorProto.ExtensionRange._readField, { start: 0, end: 0 }, end);
};
DescriptorProto.ExtensionRange._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.start = pbf.readVarint(true);
    else if (tag === 2) obj.end = pbf.readVarint(true);
};
DescriptorProto.ExtensionRange.write = function (obj, pbf) {
    if (obj.start) pbf.writeVarintField(1, obj.start);
    if (obj.end) pbf.writeVarintField(2, obj.end);
};

// FieldDescriptorProto ========================================

var FieldDescriptorProto = exports.FieldDescriptorProto = {};

FieldDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(FieldDescriptorProto._readField, { name: "", number: 0, label: 0, type: 0, type_name: "", extendee: "", default_value: "", options: null }, end);
};
FieldDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 3) obj.number = pbf.readVarint(true);
    else if (tag === 4) obj.label = pbf.readVarint();
    else if (tag === 5) obj.type = pbf.readVarint();
    else if (tag === 6) obj.type_name = pbf.readString();
    else if (tag === 2) obj.extendee = pbf.readString();
    else if (tag === 7) obj.default_value = pbf.readString();
    else if (tag === 8) obj.options = FieldOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
FieldDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.number) pbf.writeVarintField(3, obj.number);
    if (obj.label) pbf.writeVarintField(4, obj.label);
    if (obj.type) pbf.writeVarintField(5, obj.type);
    if (obj.type_name) pbf.writeStringField(6, obj.type_name);
    if (obj.extendee) pbf.writeStringField(2, obj.extendee);
    if (obj.default_value) pbf.writeStringField(7, obj.default_value);
    if (obj.options) pbf.writeMessage(8, FieldOptions.write, obj.options);
};

FieldDescriptorProto.Type = {
    "TYPE_DOUBLE": {
        "value": 1,
        "options": {}
    },
    "TYPE_FLOAT": {
        "value": 2,
        "options": {}
    },
    "TYPE_INT64": {
        "value": 3,
        "options": {}
    },
    "TYPE_UINT64": {
        "value": 4,
        "options": {}
    },
    "TYPE_INT32": {
        "value": 5,
        "options": {}
    },
    "TYPE_FIXED64": {
        "value": 6,
        "options": {}
    },
    "TYPE_FIXED32": {
        "value": 7,
        "options": {}
    },
    "TYPE_BOOL": {
        "value": 8,
        "options": {}
    },
    "TYPE_STRING": {
        "value": 9,
        "options": {}
    },
    "TYPE_GROUP": {
        "value": 10,
        "options": {}
    },
    "TYPE_MESSAGE": {
        "value": 11,
        "options": {}
    },
    "TYPE_BYTES": {
        "value": 12,
        "options": {}
    },
    "TYPE_UINT32": {
        "value": 13,
        "options": {}
    },
    "TYPE_ENUM": {
        "value": 14,
        "options": {}
    },
    "TYPE_SFIXED32": {
        "value": 15,
        "options": {}
    },
    "TYPE_SFIXED64": {
        "value": 16,
        "options": {}
    },
    "TYPE_SINT32": {
        "value": 17,
        "options": {}
    },
    "TYPE_SINT64": {
        "value": 18,
        "options": {}
    }
};

FieldDescriptorProto.Label = {
    "LABEL_OPTIONAL": {
        "value": 1,
        "options": {}
    },
    "LABEL_REQUIRED": {
        "value": 2,
        "options": {}
    },
    "LABEL_REPEATED": {
        "value": 3,
        "options": {}
    }
};

// EnumDescriptorProto ========================================

var EnumDescriptorProto = exports.EnumDescriptorProto = {};

EnumDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(EnumDescriptorProto._readField, { name: "", value: [], options: null }, end);
};
EnumDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.value.push(EnumValueDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.options = EnumOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
EnumDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.value) for (var i = 0; i < obj.value.length; i++) pbf.writeMessage(2, EnumValueDescriptorProto.write, obj.value[i]);
    if (obj.options) pbf.writeMessage(3, EnumOptions.write, obj.options);
};

// EnumValueDescriptorProto ========================================

var EnumValueDescriptorProto = exports.EnumValueDescriptorProto = {};

EnumValueDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(EnumValueDescriptorProto._readField, { name: "", number: 0, options: null }, end);
};
EnumValueDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.number = pbf.readVarint(true);
    else if (tag === 3) obj.options = EnumValueOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
EnumValueDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.number) pbf.writeVarintField(2, obj.number);
    if (obj.options) pbf.writeMessage(3, EnumValueOptions.write, obj.options);
};

// ServiceDescriptorProto ========================================

var ServiceDescriptorProto = exports.ServiceDescriptorProto = {};

ServiceDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(ServiceDescriptorProto._readField, { name: "", method: [], options: null }, end);
};
ServiceDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.method.push(MethodDescriptorProto.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.options = ServiceOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
ServiceDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.method) for (var i = 0; i < obj.method.length; i++) pbf.writeMessage(2, MethodDescriptorProto.write, obj.method[i]);
    if (obj.options) pbf.writeMessage(3, ServiceOptions.write, obj.options);
};

// MethodDescriptorProto ========================================

var MethodDescriptorProto = exports.MethodDescriptorProto = {};

MethodDescriptorProto.read = function (pbf, end) {
    return pbf.readFields(MethodDescriptorProto._readField, { name: "", input_type: "", output_type: "", options: null }, end);
};
MethodDescriptorProto._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name = pbf.readString();
    else if (tag === 2) obj.input_type = pbf.readString();
    else if (tag === 3) obj.output_type = pbf.readString();
    else if (tag === 4) obj.options = MethodOptions.read(pbf, pbf.readVarint() + pbf.pos);
};
MethodDescriptorProto.write = function (obj, pbf) {
    if (obj.name) pbf.writeStringField(1, obj.name);
    if (obj.input_type) pbf.writeStringField(2, obj.input_type);
    if (obj.output_type) pbf.writeStringField(3, obj.output_type);
    if (obj.options) pbf.writeMessage(4, MethodOptions.write, obj.options);
};

// FileOptions ========================================

var FileOptions = exports.FileOptions = {};

FileOptions.read = function (pbf, end) {
    return pbf.readFields(FileOptions._readField, { java_package: "", java_outer_classname: "", java_multiple_files: false, java_generate_equals_and_hash: false, optimize_for: { "value": 1, "options": {} }, cc_generic_services: false, java_generic_services: false, py_generic_services: false, uninterpreted_option: [] }, end);
};
FileOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.java_package = pbf.readString();
    else if (tag === 8) obj.java_outer_classname = pbf.readString();
    else if (tag === 10) obj.java_multiple_files = pbf.readBoolean();
    else if (tag === 20) obj.java_generate_equals_and_hash = pbf.readBoolean();
    else if (tag === 9) obj.optimize_for = pbf.readVarint();
    else if (tag === 16) obj.cc_generic_services = pbf.readBoolean();
    else if (tag === 17) obj.java_generic_services = pbf.readBoolean();
    else if (tag === 18) obj.py_generic_services = pbf.readBoolean();
    else if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
FileOptions.write = function (obj, pbf) {
    if (obj.java_package) pbf.writeStringField(1, obj.java_package);
    if (obj.java_outer_classname) pbf.writeStringField(8, obj.java_outer_classname);
    if (obj.java_multiple_files) pbf.writeBooleanField(10, obj.java_multiple_files);
    if (obj.java_generate_equals_and_hash) pbf.writeBooleanField(20, obj.java_generate_equals_and_hash);
    if (obj.optimize_for != undefined && obj.optimize_for !== { "value": 1, "options": {} }) pbf.writeVarintField(9, obj.optimize_for);
    if (obj.cc_generic_services) pbf.writeBooleanField(16, obj.cc_generic_services);
    if (obj.java_generic_services) pbf.writeBooleanField(17, obj.java_generic_services);
    if (obj.py_generic_services) pbf.writeBooleanField(18, obj.py_generic_services);
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

FileOptions.OptimizeMode = {
    "SPEED": {
        "value": 1,
        "options": {}
    },
    "CODE_SIZE": {
        "value": 2,
        "options": {}
    },
    "LITE_RUNTIME": {
        "value": 3,
        "options": {}
    }
};

// MessageOptions ========================================

var MessageOptions = exports.MessageOptions = {};

MessageOptions.read = function (pbf, end) {
    return pbf.readFields(MessageOptions._readField, { message_set_wire_format: false, no_standard_descriptor_accessor: false, uninterpreted_option: [] }, end);
};
MessageOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.message_set_wire_format = pbf.readBoolean();
    else if (tag === 2) obj.no_standard_descriptor_accessor = pbf.readBoolean();
    else if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
MessageOptions.write = function (obj, pbf) {
    if (obj.message_set_wire_format) pbf.writeBooleanField(1, obj.message_set_wire_format);
    if (obj.no_standard_descriptor_accessor) pbf.writeBooleanField(2, obj.no_standard_descriptor_accessor);
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// FieldOptions ========================================

var FieldOptions = exports.FieldOptions = {};

FieldOptions.read = function (pbf, end) {
    return pbf.readFields(FieldOptions._readField, { ctype: { "value": 0, "options": {} }, packed: false, deprecated: false, experimental_map_key: "", uninterpreted_option: [] }, end);
};
FieldOptions._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.ctype = pbf.readVarint();
    else if (tag === 2) obj.packed = pbf.readBoolean();
    else if (tag === 3) obj.deprecated = pbf.readBoolean();
    else if (tag === 9) obj.experimental_map_key = pbf.readString();
    else if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
FieldOptions.write = function (obj, pbf) {
    if (obj.ctype != undefined && obj.ctype !== { "value": 0, "options": {} }) pbf.writeVarintField(1, obj.ctype);
    if (obj.packed) pbf.writeBooleanField(2, obj.packed);
    if (obj.deprecated) pbf.writeBooleanField(3, obj.deprecated);
    if (obj.experimental_map_key) pbf.writeStringField(9, obj.experimental_map_key);
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

FieldOptions.CType = {
    "STRING": {
        "value": 0,
        "options": {}
    },
    "CORD": {
        "value": 1,
        "options": {}
    },
    "STRING_PIECE": {
        "value": 2,
        "options": {}
    }
};

// EnumOptions ========================================

var EnumOptions = exports.EnumOptions = {};

EnumOptions.read = function (pbf, end) {
    return pbf.readFields(EnumOptions._readField, { uninterpreted_option: [] }, end);
};
EnumOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
EnumOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// EnumValueOptions ========================================

var EnumValueOptions = exports.EnumValueOptions = {};

EnumValueOptions.read = function (pbf, end) {
    return pbf.readFields(EnumValueOptions._readField, { uninterpreted_option: [] }, end);
};
EnumValueOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
EnumValueOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// ServiceOptions ========================================

var ServiceOptions = exports.ServiceOptions = {};

ServiceOptions.read = function (pbf, end) {
    return pbf.readFields(ServiceOptions._readField, { uninterpreted_option: [] }, end);
};
ServiceOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
ServiceOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// MethodOptions ========================================

var MethodOptions = exports.MethodOptions = {};

MethodOptions.read = function (pbf, end) {
    return pbf.readFields(MethodOptions._readField, { uninterpreted_option: [] }, end);
};
MethodOptions._readField = function (tag, obj, pbf) {
    if (tag === 999) obj.uninterpreted_option.push(UninterpretedOption.read(pbf, pbf.readVarint() + pbf.pos));
};
MethodOptions.write = function (obj, pbf) {
    if (obj.uninterpreted_option) for (var i = 0; i < obj.uninterpreted_option.length; i++) pbf.writeMessage(999, UninterpretedOption.write, obj.uninterpreted_option[i]);
};

// UninterpretedOption ========================================

var UninterpretedOption = exports.UninterpretedOption = {};

UninterpretedOption.read = function (pbf, end) {
    return pbf.readFields(UninterpretedOption._readField, { name: [], identifier_value: "", positive_int_value: 0, negative_int_value: 0, double_value: 0, string_value: null, aggregate_value: "" }, end);
};
UninterpretedOption._readField = function (tag, obj, pbf) {
    if (tag === 2) obj.name.push(UninterpretedOption.NamePart.read(pbf, pbf.readVarint() + pbf.pos));
    else if (tag === 3) obj.identifier_value = pbf.readString();
    else if (tag === 4) obj.positive_int_value = pbf.readVarint();
    else if (tag === 5) obj.negative_int_value = pbf.readVarint(true);
    else if (tag === 6) obj.double_value = pbf.readDouble();
    else if (tag === 7) obj.string_value = pbf.readBytes();
    else if (tag === 8) obj.aggregate_value = pbf.readString();
};
UninterpretedOption.write = function (obj, pbf) {
    if (obj.name) for (var i = 0; i < obj.name.length; i++) pbf.writeMessage(2, UninterpretedOption.NamePart.write, obj.name[i]);
    if (obj.identifier_value) pbf.writeStringField(3, obj.identifier_value);
    if (obj.positive_int_value) pbf.writeVarintField(4, obj.positive_int_value);
    if (obj.negative_int_value) pbf.writeVarintField(5, obj.negative_int_value);
    if (obj.double_value) pbf.writeDoubleField(6, obj.double_value);
    if (obj.string_value) pbf.writeBytesField(7, obj.string_value);
    if (obj.aggregate_value) pbf.writeStringField(8, obj.aggregate_value);
};

// UninterpretedOption.NamePart ========================================

UninterpretedOption.NamePart = {};

UninterpretedOption.NamePart.read = function (pbf, end) {
    return pbf.readFields(UninterpretedOption.NamePart._readField, { name_part: "", is_extension: false }, end);
};
UninterpretedOption.NamePart._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.name_part = pbf.readString();
    else if (tag === 2) obj.is_extension = pbf.readBoolean();
};
UninterpretedOption.NamePart.write = function (obj, pbf) {
    if (obj.name_part) pbf.writeStringField(1, obj.name_part);
    if (obj.is_extension) pbf.writeBooleanField(2, obj.is_extension);
};

// SourceCodeInfo ========================================

var SourceCodeInfo = exports.SourceCodeInfo = {};

SourceCodeInfo.read = function (pbf, end) {
    return pbf.readFields(SourceCodeInfo._readField, { location: [] }, end);
};
SourceCodeInfo._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.location.push(SourceCodeInfo.Location.read(pbf, pbf.readVarint() + pbf.pos));
};
SourceCodeInfo.write = function (obj, pbf) {
    if (obj.location) for (var i = 0; i < obj.location.length; i++) pbf.writeMessage(1, SourceCodeInfo.Location.write, obj.location[i]);
};

// SourceCodeInfo.Location ========================================

SourceCodeInfo.Location = {};

SourceCodeInfo.Location.read = function (pbf, end) {
    return pbf.readFields(SourceCodeInfo.Location._readField, { path: [], span: [] }, end);
};
SourceCodeInfo.Location._readField = function (tag, obj, pbf) {
    if (tag === 1) pbf.readPackedVarint(obj.path, true);
    else if (tag === 2) pbf.readPackedVarint(obj.span, true);
};
SourceCodeInfo.Location.write = function (obj, pbf) {
    if (obj.path) pbf.writePackedVarint(1, obj.path);
    if (obj.span) pbf.writePackedVarint(2, obj.span);
};
